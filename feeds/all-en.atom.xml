<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>lxgr's blog</title><link href="//blog.lxgr.net/" rel="alternate"></link><link href="//blog.lxgr.net/feeds/all-en.atom.xml" rel="self"></link><id>//blog.lxgr.net/</id><updated>2015-04-30T13:32:00+02:00</updated><entry><title>Booting multiple Ubuntu versions with EFI</title><link href="//blog.lxgr.net/posts/2015/04/30/grub-efi-multiboot/" rel="alternate"></link><updated>2015-04-30T13:32:00+02:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2015-04-30:posts/2015/04/30/grub-efi-multiboot/</id><summary type="html">&lt;p&gt;For an upcoming project, I will have to use Ubuntu 14.04, and since I didn't want to downgrade my main Ubuntu install on my laptop, I decided to install the second version on a spare partition of my primary harddisk. Sounds easy, right? That's what I thought too, and I was very wrong.&lt;/p&gt;
&lt;p&gt;I expected to be able to simply point the Ubuntu installer to the spare partition and wait for the automatic setup to complete, like I used to when I was using plain old BIOS and MBRs to boot my system. My current laptop, however, supports something called UEFI and Secure Boot, and since the "secure" part piqued my interest, I had decided to give it a try. I have been using this setup for dual-booting Ubuntu and Windows 8 for more than a year without any problems now.&lt;/p&gt;
&lt;p&gt;After watching the installer copy all the necessary files of Ubuntu 14.04 to the disk and installing the bootloader, I booted into the new system, and everything worked as expected so far – I saw the new, old 14.04 desktop and was even able to open my main, encrypted 15.04 partition using Nautilus. But when I wanted to boot back into my main system, I realized that something had gone wrong: My 15.04 install didn't show up anywhere in the boot process. Not in the EFI boot menu of my laptop I can access by pressing F12 during the boot process (I used that to boot the Windows, because somehow the secure boot stuff interfered with grub's chain loading), and also not in grub itself – it looked as if the installation had never existed in the first place (except for the fact that I was able to see all of its file in 14.04, of course).&lt;/p&gt;
&lt;p&gt;After the initial rush of panic had subsided, I was able to restore the system to its original state by the "usual" process of &lt;a href="http://howtoubuntu.org/how-to-repair-restore-reinstall-grub-2-with-a-ubuntu-live-cd"&gt;mounting and chrooting&lt;/a&gt; my previous system and executing &lt;code&gt;grub-install&lt;/code&gt;. This worked, but now I was not able to boot into the new system anymore, besides executing all those steps again from within the old system. I realized I had to dig into the details of the Linux boot process on EFI (and secure boot) if I wanted to accomplish the triple-boot setup I had in mind. If you are unfamiliar with UEFI, I would recommend you to &lt;a href="https://www.happyassassin.net/2014/01/25/uefi-boot-how-does-that-actually-work-then/"&gt;read an introduction&lt;/a&gt; before reading the following paragraphs.&lt;/p&gt;
&lt;p&gt;The main problem seemed to be that the &lt;code&gt;grub-install&lt;/code&gt; utility of both Ubuntu systems (which is also executed from the installer) wrote to the same location – I just didn't know what that location was. I started to dig into the details of the EFI boot process – from previous triple-boot experiments on a Mac I vaguely remembered something about a so-called "EFI system partition" where the initial boot loaders of all installed operating systems are stored, and also that there were some parts of the UEFI configuration that were stored in a non-volatile memory on the mainboard. This is very different from the "legacy" boot process, where the trusty BIOS simply loads a chunk of code stored in the MBR of some disk (which can be configured in the BIOS setup, but usually defaults to a sequence of CD-ROM/USB/primary HDD) and executes it. That process is both simple (it doesn't depend on any stable configuration storage within the PC) and robust (in my experience, it was possible to migrate to a new machine simply by swapping the hard drive!), but is also showing its age – things like a dual-boot setup of uncooperating operating systems quickly become a mess, as everybody who has ever installed Windows after Linux on the same machine probably knows. Additionally, there is no mechanism that allows checking the integrity of the system before it is booted, enabling malware that hooks itself into the boot process and is virtually undetectable by any software or operating system mechanism.&lt;/p&gt;
&lt;p&gt;UEFI solves the problem of multiple operating systems by specifying the "EFI system partition", which is basically just a plain old FAT partition with a special partition flag and a standardized folder structure where every operating system on the disk or even machine (more on that later) can store its initial bootloader as an executable file. This is a much more robust and future-proof way of storing the first-stage bootloader than the very limited MBR scheme that basically only allows a single primary bootloader which has to locate and execute all secondary boot loaders of all operating systems on the drive. However, it is unfortunately not enough (at least on my computer!) to just dump a bootloader in the correct location (which would have been a &lt;em&gt;really&lt;/em&gt; nice EFI feature!) – the corresponding operating system also has to tell the EFI about the new bootloader (both the EFI disk's UUID it resides on and the path on that disk), which then stores that information in its non-volatile configuration memory (a.k.a. NVRAM).&lt;/p&gt;
&lt;p&gt;To sum the EFI boot process up, you need a folder on the EFI system partition containing your operating system's boot loader as an EFI binary (which in turn might be the first stage of a multi-stage boot loader that simply locates and executes its remaining parts) and a pointer (i.e. disk and path) to that file in the NVRAM. In the case of secure boot, the EFI binary will also be signed by some "trusted" entity, which could be your operating system vendor or amusingly Microsoft (even though you aren't actually using their operating system – this is because many hardware vendors opted to include their keys in their firmware, which was cause for much political discussion when secure boot was initially introduced).&lt;/p&gt;
&lt;p&gt;Fortunately, &lt;code&gt;grub-install&lt;/code&gt; takes care about all of that automatically as long as all the correct flags are supplied to it – but unfortunately, in the case of Ubuntu and secure boot, this only works for a single installation per &lt;em&gt;machine&lt;/em&gt; (i.e. &lt;em&gt;not&lt;/em&gt; per disk, which kept me puzzling for hours!). I'm no expert on secure boot, but I think that this might not be easily fixable by Ubuntu, depending on how exactly the signature mechanism is implemented.&lt;/p&gt;
&lt;p&gt;When invoked with no parameters, Ubuntu's &lt;code&gt;grub-install&lt;/code&gt;, on an EFI system, installs its signed bootloader to the EFI system partition that is mounted in &lt;code&gt;/boot/efi&lt;/code&gt; (which might or might not be the one you want to use on a multi-disk setup!), in the folder &lt;code&gt;/EFI/ubuntu/&lt;/code&gt;. The signed loader consists of a shim signed by Microsoft that subsequently executes the actual EFI loader called &lt;code&gt;grubx64.efi&lt;/code&gt; in the same directory. Finally, there is a &lt;code&gt;grub.cfg&lt;/code&gt; configuration file which contains a pointer (both as a disk UUID and as a GPT number) to the "regular" grub boot disk, which is usually your Linux root partition (or a separate boot partition if you are using an encrypted root device).&lt;/p&gt;
&lt;p&gt;Initially, the problem only seemed to be that both Ubuntu installs were trying to install their bootloader and configuration to the same EFI subdirectory – I thought that if I were to somehow convince &lt;code&gt;grub-install&lt;/code&gt; to install the EFI loader to some other subdirectory of &lt;code&gt;/EFI&lt;/code&gt;, I would be able to select the Ubuntu I wanted from the EFI boot screen. &lt;code&gt;grub-install&lt;/code&gt; conveniently has an option for exactly that; you can either change the value of the &lt;code&gt;GRUB_DISTRIBUTOR&lt;/code&gt; variable in &lt;code&gt;/etc/default/grub&lt;/code&gt;, or directly supply it using the &lt;code&gt;--bootloader-id&lt;/code&gt; parameter. When invoking &lt;code&gt;grub-install&lt;/code&gt; this way, you can see that a new folder in &lt;code&gt;/EFI&lt;/code&gt; will be created using the supplied name (and registered with the EFI NVRAM). Unfortunately, while I was able to boot from the newly created boot entry, I didn't seem to be able to change the disk that grub was booting from in any way. It took me hours to find out why.&lt;/p&gt;
&lt;p&gt;Remember that grub uses the value stored in &lt;code&gt;/EFI/&amp;lt;loadername&amp;gt;/grub.cfg&lt;/code&gt; to determine the disk where it will continue loading. With a lot of trial-and-error experimentation, I was finally able to determine that regardless of which boot entry I was using in the EFI boot manager, grub would always read the same grub.cfg from &lt;code&gt;/EFI/ubuntu&lt;/code&gt;, &lt;strong&gt;regardless of the actual bootloader location&lt;/strong&gt; (i.e. subfolder of &lt;code&gt;/EFI&lt;/code&gt;)! This location is actually hardcoded in the &lt;code&gt;grubx64.efi&lt;/code&gt; binary, which can be verified by using &lt;code&gt;strings&lt;/code&gt; or simply opening it with a hex editor. This means that regardless of the Ubuntu install from which &lt;code&gt;grub-install&lt;/code&gt; was executed, only the system that &lt;em&gt;most recently&lt;/em&gt; installed the loader in the &lt;em&gt;default location&lt;/em&gt; &lt;code&gt;/EFI/ubuntu&lt;/code&gt; was actually able to change the partition that grub would boot from. (I think I found out about that hard-coded string from some bug report, which I will try to find and reference here.)&lt;/p&gt;
&lt;p&gt;If the hard-coded string is modified to reflect the actual location of the boot entry in the &lt;code&gt;/EFI&lt;/code&gt; directory everything works as expected (with secure boot enforcing disabled)! Now why would the Ubuntu team be so stupid to hard-code a string that obviously would better be supplied by a parameter? The answer is secure boot: If you enable signature enforcing in the EFI configuration, the modified bootloader stops working. It seems that the string within the binary is covered in the asymmetric signature Canonical uses to certify their bootloader; they could either modify it (and break all systems where secure boot is enforced) or leave it as it is (and break multi-booting). They seem to have decided on the latter. (Maybe there is also a third way, where the configuration file location could be encoded relative to the binary location, i.e. &lt;code&gt;./grub.cfg&lt;/code&gt;, but I don't know enough about EFI to say whether such a thing is possible.)&lt;/p&gt;
&lt;p&gt;As I later realized, there is an easier way than modifying the signed grub binary. Since secure boot doesn't work with the modified loader anyway, I tried to invoke &lt;code&gt;grub-install&lt;/code&gt; with the &lt;code&gt;--no-uefi-secure-boot&lt;/code&gt; parameter and examined the resulting bootloader: Without secure boot, there is only a single EFI executable that is also called &lt;code&gt;grubx64.efi&lt;/code&gt; (which confused me to no end, since the other files are &lt;em&gt;not&lt;/em&gt; cleaned up by &lt;code&gt;grub-install&lt;/code&gt;, and I assumed that the configuration file was still working), but that has a much simpler internal structure and importantly has the boot disk location hardcoded. This wasn't as easy to find as the suspicious &lt;code&gt;/EFI/ubuntu&lt;/code&gt; string – it is only some kind of relative disk ID like &lt;code&gt;(,gpt2)&lt;/code&gt;, if your boot partition is the second partition of the volume on which the EFI partition resides, but a complete disk UUID if the boot partition is located on a &lt;em&gt;different&lt;/em&gt; disk.&lt;/p&gt;
&lt;p&gt;Finally, here is the complete guide on how to install two Ubuntu versions on a single disk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disable secure boot in your EFI settings.&lt;/li&gt;
&lt;li&gt;Install the first Ubuntu system on the disk. (If it already exists and you have spare space on your disk, you can obviously skip this.)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Backup the boot entry of the first disk by reinstalling it from within the system using a different name, without secure boot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;grub-install --bootloader-id=myfirstubuntu --no-uefi-secure-boot
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the second system using the regular Ubuntu installer where you want it. This will break the boot entry of the first system called &lt;code&gt;ubuntu&lt;/code&gt;, but not the backup you just created.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Boot the second system and create a backup of the bootloader, e.g. &lt;code&gt;grub-install --bootloader-id=mysecondubuntu --no-uefi-secure-boot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(only if you want to primarily boot the first system) Boot the first system using your computer's EFI boot menu and execute &lt;code&gt;grub-install&lt;/code&gt; without any parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Congratulations, you now have &lt;em&gt;two&lt;/em&gt; Ubuntus running on a single machine!&lt;/p&gt;
&lt;p&gt;If you want to use a similar setup, but using more than one disk, you can basically use the same steps if you don't mind that the same EFI partition of the first disk will be used for both systems, which means that you can never format or remove that disk without also disrupting the system on the other disk. grub will just put a pointer to the second disk in its binary that is executed from the EFI partition on the first disk, which should theoretically even survive partition and disk renumbering (but don't count on it!).&lt;/p&gt;
&lt;p&gt;If that is a problem for you, there is also the possibility of using a second EFI partition on the second disk, but the Ubuntu installer will make your life even harder by stubbornly insisting to use the EFI partition on the first disk; I was able to solve this only by creating a backup of the first system's bootloader as described above, installing the second system, mounting the second EFI partition in &lt;code&gt;/boot/efi&lt;/code&gt; instead of the first one and rerunning &lt;code&gt;grub-install --bootloader-id=...&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can verify if everything has been setup as you want it by examining the EFI directory on the EFI system partition(s) on your disk(s) as well as the output of &lt;code&gt;efibootmgr -v&lt;/code&gt;, which lists the content of the boot list in the EFI NVRAM.&lt;/p&gt;
&lt;p&gt;There is also an option &lt;code&gt;--removable&lt;/code&gt; which supposedly sets up the EFI directory on a removable device, which looks a bit different than for internal devices and importantly doesn't create an NVRAM entry (which wouldn't be available on different machines anyway). You might be able to use that to boot from an internal disk too, but I have not tried that approach, however.&lt;/p&gt;
&lt;p&gt;Of course, if that sounds like a lot of headache and your computer still supports the legacy BIOS boot process (a.k.a CSM in EFI parlance), you can just install the second system on a different disk with an MBR bootloader and configure your EFI for both CSM and EFI booting if it supports that; then you can just select the EFI entry of the first system or the second disk (which will start the second system's boot loader) in the EFI boot menu.&lt;/p&gt;
&lt;p&gt;Let me know if you actually made it through that big wall of text and were able to solve your EFI boot problems in the comments!&lt;/p&gt;
&lt;h1&gt;Update (2015-12-11):&lt;/h1&gt;
&lt;p&gt;There is an &lt;a href="https://www.kubuntuforums.net/archive/index.php/t-68588.html"&gt;interesting discussion&lt;/a&gt; about the whole topic in the Kubuntu forums. Apparently, it should also be possible to use multiple EFI partitions to get multiple instances of Ubuntu working with secure boot. Thanks for that idea, and sorry for being unreachable. I will probably have to add my mail address here sometime. In the meantime, you can try "me" at lxgr dot net.&lt;/p&gt;</summary><category term="linux"></category><category term="software"></category></entry><entry><title>How to fix video tearing on Chrome/Chromium and Compiz</title><link href="//blog.lxgr.net/posts/2015/04/27/chrome-linux-vsync/" rel="alternate"></link><updated>2015-04-27T18:27:00+02:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2015-04-27:posts/2015/04/27/chrome-linux-vsync/</id><summary type="html">&lt;p&gt;One thing I really like about Netflix is their excellent device and browser support. Unlike a certain other streaming service (the one from the company also selling books and clouds), which wouldn't allow watching their streams using an Android tablet (bizarrely, smartphones were somehow allowed...?) and requires Flash and/or Silverlight in the browser, Netflix only requires a browser that supports the &lt;a href="https://en.wikipedia.org/wiki/Media_Source_Extensions"&gt;HTML5 Media Source Extensions&lt;/a&gt; (plain "old" HTML5 video tag support is not enough), the &lt;a href="http://www.w3.org/TR/encrypted-media/"&gt;HTML5 DRM extensions&lt;/a&gt; a.k.a. EME and one of the three supported DRM plugins (Microsoft's Playready, Apple's Fairplay, or Google's Widevine; used by and shipping with Windows/IE, Safari on OS X and Chrome, respectively). Of course, the DRM requirement is annoying (somehow, these things tend to be broken sooner rather than later and only make things inconvenient for legitimate customers), but it is much better than those horribly outdated and inefficient browser plugins.&lt;/p&gt;
&lt;p&gt;The only thing that was annoying me was a very annoying case of &lt;a href="https://en.wikipedia.org/wiki/Screen_tearing"&gt;screen tearing&lt;/a&gt; using Chrome in fullscreen on my laptop running Unity/Ubuntu. This was never an issue for me with other browsers (e.g. Firefox), video players or games, so I initially suspected a bug in Chromium and &lt;a href="http://code.google.com/p/chromium/issues/detail?id=344141"&gt;filed a bug report&lt;/a&gt;. Thanks to some &lt;a href="https://code.google.com/p/chromium/issues/detail?id=344141#c20"&gt;very helpful comments&lt;/a&gt; on that bug's discussion thread, I have been able to finally understand what is going on.&lt;/p&gt;
&lt;p&gt;However, as it turns out, the problem seems to be actually caused by Compiz (the default window manager of Unity on Ubuntu), or more specifically, its "unredirect output" feature for fullscreen applications. Compiz is a &lt;a href="https://en.wikipedia.org/wiki/Compositing_window_manager"&gt;compositing window manager&lt;/a&gt;, which means that applications do not draw directly to the framebuffer, but to a texture in video memory; the window manager then uses the GPU to display all windows on their respective positions. This is both more efficient (for example, dragging a window doesn't require all affected applications to redraw their content up to 60 times per second anymore) and visually pleasing (it prevents those &lt;a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ff684179%28v=vs.85%29.aspx"&gt;ugly broken windows&lt;/a&gt; that appear when dragging a window over another window whose application is not responding to redraw calls anymore).&lt;/p&gt;
&lt;p&gt;Of course, while compositing all those windows/textures on the GPU is very efficient, it is still not free; especially when only a single full-screen application like a video player is being displayed, compositing is only a waste of resources. "Unredirect output" seems to allow such full-screen applications to again draw directly to the framebuffer (as opposed to a texture). However, some applications seem to have problems doing just that; they somehow get their timing wrong and draw their window contents at the wrong moments (i.e. not during the "vertical sync period" a.k.a. VSync), which leads to visual tearing.&lt;/p&gt;
&lt;p&gt;It turns out that Compiz (at least on my distribution, Ubuntu 14.10) already comes with a pre-populated list of applications that are excluded from unredirecting. That list explains why I was experiencing tearing in Chrome, but not in any other application: All video players and other applications I have tried are preloaded on that list – except Chrome or Chromium!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(any) &amp;amp; !(class=Totem) &amp;amp; !(class=MPlayer) &amp;amp; !(class=Vlc) &amp;amp; !(class=Plugin-container) &amp;amp; !(class=Firefox)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adding filter clauses for both Chrome and Chromium completely fixes the issue for me (the list can be accessed and modified in the "Composite" tab of the "CompizConfig Settings Manager", which should be available in your distribution if it ships with Compiz):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[...] &amp;amp; !(class=^Google-chrome) &amp;amp; !(class=Chromium)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This fix should solve the problem regardless of your graphics card manufacturer; if you are using an Intel GPU, you might also have luck with enabling the &lt;a href="https://wiki.archlinux.org/index.php/Intel_graphics#Tear-free_video"&gt;TearFree&lt;/a&gt; option of the video driver, which might or might not be more efficient and/or cause other problems with your graphics – I have decided to use the Compiz fix, since it aligns with the way all other applications already are drawing their fullscreen windows on my system.&lt;/p&gt;
&lt;p&gt;If you are experiencing the same problem, let me know if this fix helps in the comments!&lt;/p&gt;</summary><category term="graphics"></category><category term="software"></category><category term="linux"></category></entry><entry><title>vim and that weird one-second startup delay</title><link href="//blog.lxgr.net/posts/2014/05/15/vim-tmux-startup-delay/" rel="alternate"></link><updated>2014-05-15T20:16:00+02:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2014-05-15:posts/2014/05/15/vim-tmux-startup-delay/</id><summary type="html">&lt;p&gt;Are you using &lt;code&gt;vim&lt;/code&gt;, &lt;code&gt;tmux&lt;/code&gt;, a graphical Linux desktop and are you experiencing random sluggishness when starting your editor? If not, you can skip this one.&lt;/p&gt;
&lt;p&gt;This is something that had been bugging me for ages, first at work on my workstation, then at home: Long-running &lt;code&gt;tmux&lt;/code&gt; sessions would sporadically induce startup delays of the &lt;code&gt;vim&lt;/code&gt; editor of exactly one second. Reattaching &lt;code&gt;tmux&lt;/code&gt; didn't solve the problem; logging out and back into my desktop always did.&lt;/p&gt;
&lt;p&gt;First I thought I was just being impatient, but after some profiling with &lt;code&gt;time&lt;/code&gt;, I was getting curious. &lt;code&gt;strace&lt;/code&gt; revealed that the delay was &lt;em&gt;exactly&lt;/em&gt; one second: Something in &lt;code&gt;vim&lt;/code&gt;s startup process was calling the &lt;code&gt;nanosleep(2)&lt;/code&gt; system call with one second as an argument!&lt;/p&gt;
&lt;p&gt;To make a long story short: This is caused by some X library that is mislead by a broken environment variable &lt;code&gt;SESSION_MANAGER&lt;/code&gt; from a former X session. &lt;code&gt;tmux&lt;/code&gt; tends to get rather attached to environment variables, which, in this instance, causes the sluggishness.&lt;/p&gt;
&lt;p&gt;If the problem goes away after executing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;unset SESSION_MANAGER
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or something similar for your shell, you can fix it permanently by appending the following line to your &lt;code&gt;.tmux.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;set-option -g -a update-environment &amp;quot; SESSION_MANAGER&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are now wondering why &lt;code&gt;vim&lt;/code&gt; would need access to some X-related variables in the first place (as I was): It lets &lt;code&gt;vim&lt;/code&gt; access your X clipboard! (Strangely, the variable &lt;code&gt;SESSION_MANAGER&lt;/code&gt; is not actually needed for that, but you can verify it by overwriting some more critical X variable like &lt;code&gt;DISPLAY&lt;/code&gt; or &lt;code&gt;XAUTHORITY&lt;/code&gt; and subsequently trying to use the X clipboard from within &lt;code&gt;vim&lt;/code&gt;.)&lt;/p&gt;</summary><category term="linux"></category><category term="software"></category></entry><entry><title>On agents and keychains (Part 3)</title><link href="//blog.lxgr.net/posts/2014/05/12/on-agents-and-keychains-part3/" rel="alternate"></link><updated>2014-05-12T21:40:00+02:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2014-05-12:posts/2014/05/12/on-agents-and-keychains-part3/</id><summary type="html">&lt;p&gt;In the previous posts of this series, I've &lt;a href="//blog.lxgr.net/posts/2014/05/10/on-agents-and-keychains-part1/"&gt;described the operating environment&lt;/a&gt; of a password or private key agent and &lt;a href="//blog.lxgr.net/posts/2014/05/11/on-agents-and-keychains-part2/"&gt;given a summary of their tasks&lt;/a&gt;. This time, we'll see how some real-world agents are implemented.&lt;/p&gt;
&lt;p&gt;But before that, a disclaimer: I'm merely an interested observer of all of the tools mentioned below. All my knowledge is from looking at their documentation, source code and from practical experiments. If you plan to use any of them for your private, sensitive data, you should definitely not rely solely on this analysis.&lt;/p&gt;
&lt;h1&gt;Part 3: Real-world password and private key agents&lt;/h1&gt;
&lt;h2&gt;&lt;code&gt;ssh-agent&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The first tool we'll be looking at is my personal favorite of the batch: &lt;a href="http://manpages.ubuntu.com/manpages/trusty/en/man1/ssh-agent.1.html"&gt;&lt;code&gt;ssh-agent&lt;/code&gt;&lt;/a&gt;. Its job is to protect an user's private SSH authentication keys.&lt;/p&gt;
&lt;p&gt;Usually, those keys are stored in the user's home directory, encrypted with a symmetric key derived from a passphrase that has to be entered every time the key is used to connect to a remote server using SSH; &lt;code&gt;ssh-agent&lt;/code&gt; was developed to avoid having to type it that often.&lt;/p&gt;
&lt;p&gt;When an instance of &lt;code&gt;ssh-agent&lt;/code&gt; is started, it creates a &lt;a href="https://en.wikipedia.org/wiki/Unix_domain_socket"&gt;Unix domain socket&lt;/a&gt;; the file system path of that socket will usually be stored in an environment variable called &lt;code&gt;SSH_AUTH_SOCKET&lt;/code&gt;. Starting the agent and setting the variable is usually handled by a few lines in the user's desktop and/or shell configuration files. This socket is then used by &lt;code&gt;ssh-agent&lt;/code&gt;'s clients to request various operations.&lt;/p&gt;
&lt;p&gt;First of all, to be of any use, the private keys have to be actually loaded into the memory of the agent. This is performed by a tool called &lt;a href="http://manpages.ubuntu.com/manpages/trusty/en/man1/ssh-add.1.html"&gt;&lt;code&gt;ssh-add&lt;/code&gt;&lt;/a&gt;, which basically asks the user for his passphrase and the location of his private keys, decrypts them in memory, and sends them over the Unix socket to the agent.&lt;/p&gt;
&lt;p&gt;The nice thing about &lt;code&gt;ssh-agent&lt;/code&gt;'s &lt;a href="http://www.openbsd.org/cgi-bin/cvsweb/src/usr.bin/ssh/PROTOCOL.agent?rev=HEAD;content-type=text%2Fplain"&gt;protocol&lt;/a&gt; spoken over the socket is this: There is no command to extract a private key from it. Clients (mostly instances of the SSH client, &lt;code&gt;ssh&lt;/code&gt;, really) can request the agent to sign some data on their behalf, which in turn allows them to authenticate against a remote SSH server. There are some other commands (e.g. to remove some or all private keys, temporarily lock or unlock the agent with a password, or get a list of currently loaded keys), but except for security bugs or other side channels, there is no way to make the agent reveal the private keys.&lt;/p&gt;
&lt;p&gt;As I've mentioned, a security tool can only be as secure as the environment it's running in and on whose security measures it is relying on. In the case of &lt;code&gt;ssh-agent&lt;/code&gt;, this is the user's Unix account, and in many cases some graphical desktop environment. &lt;code&gt;ssh-agent&lt;/code&gt; (or at least the version of OpenSSH included in Ubuntu) tries to limit the ways other applications in the same context can interact with its virtual memory by &lt;a href="http://bazaar.launchpad.net/~ubuntu-branches/ubuntu/trusty/openssh/trusty/view/head:/ssh-agent.c#L1154"&gt;disabling&lt;/a&gt; the &lt;code&gt;ptrace(2)&lt;/code&gt; facility of the operating system. I'll write a lot more on that in a future post, but for now, it suffices to say that this (hopefully) makes it impossible for other processes to peek into an agent's memory space (using &lt;code&gt;gdb&lt;/code&gt; or the &lt;code&gt;/proc/&amp;lt;pid&amp;gt;/mem&lt;/code&gt; device).&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;gpg-agent&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The next tool on our list seems to be quite similar to &lt;code&gt;ssh-agent&lt;/code&gt;: &lt;a href="https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html"&gt;&lt;code&gt;gpg-agent&lt;/code&gt;&lt;/a&gt; also protects private keys, uses a Unix socket and an environment variable to answer to requests, and runs with the user's permissions, started in one of the various startup scripts of the desktop environment. It is used to protect a user's private (or secret) &lt;a href="https://www.gnupg.org/"&gt;GnuPG&lt;/a&gt; encryption and signature keys.&lt;/p&gt;
&lt;p&gt;Unfortunately, the similarity ends when it comes to how &lt;code&gt;gpg-agent&lt;/code&gt; protects the user's private keys. In fact, I couldn't believe my eyes when I ran &lt;code&gt;strace&lt;/code&gt; on an instance of &lt;code&gt;gpg&lt;/code&gt; while executing a private-key operation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; strace gpg --armor --gen-revoke 2F5BBF5C
&lt;span class="go"&gt;write(8, &amp;quot;GET_PASSPHRASE 1AA19BADB016B8BF3&amp;quot;..., 203) = 203&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="go"&gt;read(8, &amp;quot;OK 70617373776F7264&amp;quot;, 1002)    = 19&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;gpg-agent&lt;/code&gt; is not a private key agent at all! It merely caches the private key passphrase, handing it out to anyone asking niecly over the Unix domain socket (which means every application running with the user's privileges). This negates almost all of the security benefits of using an agent in the first place, and on top of that, it is even &lt;em&gt;less&lt;/em&gt; secure than just storing the private key in the agent's memory: If the user's session is compromised, not only the private key, but also the passphrase can be recovered by an attacker.&lt;/p&gt;
&lt;p&gt;I can only guess that there are various historical reasons for &lt;code&gt;gpg-agent&lt;/code&gt;'s architecture, but &lt;code&gt;ssh-agent&lt;/code&gt; shows that there is a better way to handle private key caching in the userspace.&lt;/p&gt;
&lt;h2&gt;GNOME Keyring&lt;/h2&gt;
&lt;p&gt;GNOME is used as the default desktop environment for many Linux distributions; and even more are using only some parts while providing their own user interface (window manager, compositor, default applicatoins etc.) – Ubuntu is a famous example of the latter category.&lt;/p&gt;
&lt;p&gt;The GNOME applications include a handy tool called &lt;a href="https://wiki.gnome.org/Projects/GnomeKeyring/"&gt;GNOME Keyring&lt;/a&gt;, which is primarily a password manager, but can also act as a private-key manager for both SSH and GnuPG. I'm not using its private-key features any more for various reasons, but it is still my password manager of choice for everything else (primarily for web browsers).&lt;/p&gt;
&lt;p&gt;The documentation page of the software is &lt;a href="https://wiki.gnome.org/Projects/GnomeKeyring/SecurityPhilosophy"&gt;very upfront&lt;/a&gt; about what the tool can and cannot achieve: The developers openly state that for the current desktop architecture, secure privilege separation between applications is simply not possible.&lt;/p&gt;
&lt;p&gt;There used to be some kind of access control system for applications, but as it is now, every application running with the user's privileges can store and request plaintext passwords to and from the agent, which in turn stores them in an encrypted database in the user's home directory.&lt;/p&gt;
&lt;p&gt;The encryption key is derived from a passphrase defined by the user; if it is equal to their Unix login password, the keychain is conveniently "unlocked" (i.e., the encryption key is stored in the Keyring daemon's memory) as soon as the user logs in to their desktop.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gnome-keyring&lt;/code&gt; doesn't perform any security theater to make it seem as if the passwords of an unlocked keyring were somehow more secure than they are, but like &lt;code&gt;ssh-agent&lt;/code&gt;, its memory is protected from access by other user processes on my system (because its binary has a &lt;a href="http://manpages.ubuntu.com/manpages/trusty/man7/capabilities.7.html"&gt;Linux capability&lt;/a&gt; enabled).&lt;/p&gt;
&lt;h2&gt;OS X Keychain&lt;/h2&gt;
&lt;p&gt;Like GNOME, OS X provides users with a way to securely store their passwords on the disk while still granting automatic access to other applications as long as the user is logged in: &lt;a href="https://developer.apple.com/library/mac/documentation/security/conceptual/keychainServConcepts/02concepts/concepts.html"&gt;OS X Keychain&lt;/a&gt;. However, it aims to go even further than that: By using an ACL based on the code signature or binary hash of requesting programs, it &lt;a href="https://developer.apple.com/library/mac/documentation/security/conceptual/keychainServConcepts/02concepts/concepts.html#//apple_ref/doc/uid/TP30000897-CH204-CJBIBIBC"&gt;restricts access&lt;/a&gt; to the stored password to a subset of all applications running with the user's permissions.&lt;/p&gt;
&lt;p&gt;The OS X desktop environment, at least theoretically, also seems to implement more security measures than X11: Applications do not seem to be able to &lt;a href="https://developer.apple.com/library/mac/documentation/cocoa/conceptual/eventoverview/MonitoringEvents/MonitoringEvents.html"&gt;install global keyloggers&lt;/a&gt; without first requesting special permissions from the user and the &lt;code&gt;ptrace&lt;/code&gt; system call (or its cousin, &lt;code&gt;task_for_pid&lt;/code&gt;, as it is known on OS X) is only available to &lt;a href="https://blogs.oracle.com/dns/entry/understanding_the_authorization_framework_on"&gt;privileged users&lt;/a&gt; or &lt;a href="http://wiki.lazarus.freepascal.org/GDB_on_OS_X_Mavericks_and_Xcode_5"&gt;signed debugging tools&lt;/a&gt; (which in turn require user authentication).&lt;/p&gt;
&lt;p&gt;Additionally, the Keychain service seems to be running with superuser privileges, so it might theoretically be able to perform some additional verifications of the process requesting a password (maybe the aforementioned checks of the binary hash and/or code signature).&lt;/p&gt;
&lt;p&gt;But is that really enough to protect all potentially malicious, &lt;a href="http://juusosalonen.com/post/30923743427/breaking-into-the-os-x-keychain"&gt;non-root&lt;/a&gt; accesses to the stored passwords? That will be the topic of the article concluding this little series, but before that, we'll see how process memory isolation of binaries running with the same user permissions could possibly be achieved.&lt;/p&gt;</summary><category term="security"></category></entry><entry><title>On agents and keychains (Part 2)</title><link href="//blog.lxgr.net/posts/2014/05/11/on-agents-and-keychains-part2/" rel="alternate"></link><updated>2014-05-11T13:19:00+02:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2014-05-11:posts/2014/05/11/on-agents-and-keychains-part2/</id><summary type="html">&lt;p&gt;In the &lt;a href="//blog.lxgr.net/posts/2014/05/10/on-agents-and-keychains-part1/"&gt;previous post&lt;/a&gt; of this series, I've roughly described the operating environment of a password or private key agent; this time, I'll try to summarize the basic structure and tasks of such an agent.&lt;/p&gt;
&lt;h1&gt;Part 2: What does an agent do?&lt;/h1&gt;
&lt;p&gt;The job of a password or private key agent is to protect, but also to share, secrets. In the case of a password manager, the secrets are the plaintext authentication tokens, or passwords, for various user accounts and services – e.g. web and mail passwords, Wi-Fi preshared keys and many more; a private key agent like &lt;code&gt;ssh-agent&lt;/code&gt; or &lt;code&gt;gpg-agent&lt;/code&gt; protects one or more private keys used for signing and/or encryption of messages or for the use in authentication protocols.&lt;/p&gt;
&lt;p&gt;The entities that the secrets are (or are not) shared with are other processes running on the user's computer, running with the permissions of his user identity.&lt;/p&gt;
&lt;h2&gt;Restricting access to internal state&lt;/h2&gt;
&lt;p&gt;In order to be able to actually protect a user's secrets, the agent has to have some way to actually keep secrets from other processes. At least on a classical Unix system, this is a difficult task when running with the same permissions as those processes: As I've tried to explain in the last article, the permission model is not really designed for privilege separation of user applications.&lt;/p&gt;
&lt;p&gt;In fact, the task at hand might be better solved by a classical Unix daemon; a trusted server process running under a different user ID (either the superuser's or one specifically created for the daemon). (In fact, this is the approach Apple took for their OS X Keyring.)&lt;/p&gt;
&lt;p&gt;However, this is not the approach taken by some popular agents – but that's actually the topic of another article in this series.&lt;/p&gt;
&lt;h2&gt;Sharing secrets with trusted applications&lt;/h2&gt;
&lt;p&gt;While keeping secrets is an important task for an agent, there has to be some way for trusted applications to gain direct (in the case of passwords) or indirect (for private keys) access to those secrets – an agent that simply keeps all the secrets to itself is perfectly secure, but also perfectly useless.&lt;/p&gt;
&lt;p&gt;The concept of a "trusted application" is trickier than it might seem: How would the trustworthiness of an application be defined in the first place? One might be tempted to enumerate a set of such trusted applications, e.g. the web browser(s) of a user for web authentication passwords, their mail client for their mail passwords and so on. But how does the agent actually identify the requesting entity?&lt;/p&gt;
&lt;p&gt;Any approaches based on heuristics like the name of the executable file of the requesting process don't work: Users can install binaries in their home directory, where they can be freely replaced or modified by attackers.&lt;/p&gt;
&lt;p&gt;A more sophisticated way to ensure integrity of a requesting process would be to hash the contents of its executable file and store that hash in the agent along with the secrets. This doesn't seem trivial to do, at least in the user space – on Linux, the agent would probably have to work with the &lt;code&gt;/proc&lt;/code&gt; virtual file system to identify the executable of a process, but any such checks would be very likely be susceptible to &lt;a href="https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use"&gt;TOCTOU&lt;/a&gt; vulnerabilities. The operating system might theoretically be able to provide the agent with a trustworthy hash of a requestor, though – but I suspect that this is not possible on the stock Linux kernel, for example.&lt;/p&gt;
&lt;p&gt;An alternative to hashing the requesting binary is code signing. Operating systems that allow executable files to be signed by their developers or some other entity could provide the agent with the identity of the signer, which would allow "safe" modifications of the requester by its original developer or a system administrator (e.g. software updates or security patches).&lt;/p&gt;
&lt;p&gt;Unfortunately, even if the authenticity of the requestor could be determined beyond doubt, this is still not enough: What if the attacker is able to coerce an otherwise trusted application to make a request on their behalf, and reveal the reply to them? This scenario will be part of another future article.&lt;/p&gt;
&lt;h2&gt;Limitations to the agent model&lt;/h2&gt;
&lt;p&gt;Before examining some agents in detail, it should be said that there are some fundamental limitations to what even a perfectly secure agent can achieve. If the user's machine (or even only his own account) is compromised in a global way, e.g. by an attacker that installs a key logger or is able to remotely control a user's session, the security benefits of the agent might very well be completely negated.&lt;/p&gt;
&lt;p&gt;In other words, it is probably sufficient for an agent to be as secure as the environment it is operating in. An OS that does not provide even basic application isolation for graphical applications is very hard to protect indeed. (Unfortunately, almost all X11-based desktop environments are all but impossible to secure against untrustworthy applications.)&lt;/p&gt;
&lt;p&gt;Even then, an agent might be of limited utility on such an untrustworthy system, if its task is to only indirectly grant access to sensitive data. This is exactly the situation for an SSH or GPG agent: By design, such an agent will never expose a user's private keys, but will only execute various private key operations on requestor-provided data items.&lt;/p&gt;
&lt;p&gt;While an attacker with user privileges will be able to execute a number of such operations (e.g. logins on remote servers, decryption of single messages), after the compromise is detected, the keys do not necessarily have to be changed or revoked. (This might not be the case for some applications, though – e.g., if it is possible to sign new public keys with an existing private key and mark them a originating from the same user.)&lt;/p&gt;</summary><category term="security"></category></entry><entry><title>On agents and keychains (Part 1)</title><link href="//blog.lxgr.net/posts/2014/05/10/on-agents-and-keychains-part1/" rel="alternate"></link><updated>2014-05-10T14:22:00+02:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2014-05-10:posts/2014/05/10/on-agents-and-keychains-part1/</id><summary type="html">&lt;p&gt;Many people, myself included, use tools like ssh-agent or gpg-agent to protect their private keys from theft without sacrificing the convenience of password-less logins. Presumably even more people use some kind of password manager, whether that is the one included with their operating system or a third-party one. I've been using both for a long time, but only recently started to wonder about their internals: What is the threat model here, and how do those tools provide the necessary protection? This will be a series of posts on the subject; in this one, I will try to examine the necessity of such programs, and the way process separation is implemented in various operating systems.&lt;/p&gt;
&lt;h1&gt;Part 1: The need for application isolation&lt;/h1&gt;
&lt;h2&gt;Isolate what?&lt;/h2&gt;
&lt;p&gt;Before looking at the tools in question, we have to look at the environment in which they are being used.
The various Unix operating systems have historically focused their security efforts on separating the actions of multiple users on a single system – i.e., Alice is not supposed to be able to read Bob's mail. Processes usually run with a user's permissions and are free to read and modify files in their home directory, as well as communicate with each other almost without restrictions (more on that later).&lt;/p&gt;
&lt;p&gt;This model does not distinguish between a user and the programs he is using. Whether a user runs a simple unix command like &lt;code&gt;mv&lt;/code&gt; or a complex application like a web browser, the operating sytem kernel assumes that all the system calls by the user's processes are identical with the user's intentions.&lt;/p&gt;
&lt;p&gt;While this assumption is still reasonable if all of the binaries our user might run are provided by the same people who provide their operating system, things start to get interesting once users bring their own software, whether voluntarily or accidentially (in the form of malware received through whatever vector).&lt;/p&gt;
&lt;p&gt;Once the user runs any piece of "evil" code, they lose. The operating system will still isolate their requests from other users on the system, but that might be little consolation for the case of a typical desktop user – more often than not, they are the only user on their system (at least as far as Unix permissions are concerned), and a malicios application running with their permissions amounts to a full system compromise.&lt;/p&gt;
&lt;p&gt;At a first glance, it seems to be impossible for an user of such a system to protect some piece of information against their own processes, but still, the existance of password managers that use anything but a plain-text unencrypted database seems to indicate that at least their vendors think (or try to convince their customers to think) otherwise.&lt;/p&gt;
&lt;h2&gt;A different model&lt;/h2&gt;
&lt;p&gt;Before looking at the tools in question, I think it is interesting to examine some other ways of application privilege separation.&lt;/p&gt;
&lt;p&gt;While most desktop systems essentially still operate under the same security paradigms, the situation is very different for the mobile operating systems. (Presumably) inspired by the situation of malware on the most common desktop operating systems, their creators have realized that in order to unleash an enormous whealth of third-party applications on their users by design, a more strict separation of privileges is in order.&lt;/p&gt;
&lt;p&gt;Android has implemented application separation in a simple, yet very effective way: Every Android app has a unique Unix user account. This way, by default all application data is implicitly private. In order to use anything but their own data, applications have to use Android's library functions that will moderate access to system functions and potentially sensitive data. (Permissions to use those library functions are granted at the time an application is installed in an all-or-nothing fashion, but that is a design decision that could be modified to a more fine-grained model pretty easily.)&lt;/p&gt;
&lt;p&gt;Apple's iOS uses a more traditional approach with regards to UIDs - all applications are running as the user &lt;code&gt;mobile&lt;/code&gt;. Sandboxing is instead explicitly implemented in the kernel, which restricts each application's system calls to a secure subset. Basically, reads and writes to anything but a list of allowed files and directories and other security-critical system calls will fail. Some exceptions to this can be granted by the user at run-time (e.g. access to the address book or location based services).&lt;/p&gt;
&lt;h2&gt;Apps on the desktop?&lt;/h2&gt;
&lt;p&gt;Can such a security model be brought to the desktop without breaking almost any existing application? It seems that at least Apple thinks that this is the way to go. While it is still possible to run unrestricted applications on OS X, there is now also a sandboxing mechanism in place that allows a developer to whitelist the set of allowed system calls just like on iOS. This will presumably become a mandatory feature of new applications submitted to the Apple-curated Mac app store. Microsoft seems to be trying to do something similar with their Windows Store.&lt;/p&gt;
&lt;p&gt;While this might solve the problem of application isolation, there are a lot of legacy applications that will probably be never ported to such a restrictive environment, and the third popular desktop operating system, Linux, does not provide such a sandboxed app-store model for obvious reasons.&lt;/p&gt;
&lt;p&gt;Still, there are password managers and private key agents for all three major platforms – (how) do they work? This will be the topic for the following articles.&lt;/p&gt;</summary><category term="security"></category></entry><entry><title>ssh-agent and the OS X Keychain</title><link href="//blog.lxgr.net/posts/2014/05/08/ssh-agent-osx-keychain/" rel="alternate"></link><updated>2014-05-08T16:06:00+02:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2014-05-08:posts/2014/05/08/ssh-agent-osx-keychain/</id><summary type="html">&lt;p&gt;Are you relying on OS X's Keychain to protect your SSH key passphrases? You
shouldn't. (The "plain" ssh-agent is fine, though.)&lt;/p&gt;
&lt;p&gt;To be continued!&lt;/p&gt;</summary><category term="security"></category><category term="osx"></category></entry><entry><title>How to fix slow DNS lookups on Ubuntu</title><link href="//blog.lxgr.net/posts/2013/11/18/nsswitch-ubuntu-slow-dns-lookups/" rel="alternate"></link><updated>2013-11-18T22:03:00+01:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-11-18:posts/2013/11/18/nsswitch-ubuntu-slow-dns-lookups/</id><summary type="html">&lt;p&gt;If you're using a relatively recent version of Ubuntu, chances are that you have encountered spurious slowdowns that might be related to a very specific DNS failure. For me, it was the fact that &lt;code&gt;ping&lt;/code&gt; to a host &lt;em&gt;without&lt;/em&gt; a reverse DNS entry would only transmit a single ICMP request per second, even when a higher rate was specified via the &lt;code&gt;-i&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;I've traced the DNS requests that are performed by &lt;code&gt;ping&lt;/code&gt; by default (the effect does not occur when using the &lt;code&gt;-n&lt;/code&gt; option which disables host name lookup), and didn't notice anything out of the ordinary. The &lt;code&gt;NXDOMAIN&lt;/code&gt; responses were occuring almost instantly, but nevertheless, it took precisely one second for this response to actually propagate to the &lt;code&gt;ping&lt;/code&gt; process.&lt;/p&gt;
&lt;p&gt;To make a long story short: The reson for this is that Ubuntu (or more precisely, the Name Switching Service), will (by default) try to lookup DNS records not only via the regular DNS server configured via the network settings, but also using Zeroconf (a.k.a. Bonjour); a protocol that can be used to resolve hostnames locally by using multicast DNS requests and responses.&lt;/p&gt;
&lt;p&gt;This is not an issue for DNS queries that can be answered positively by your regular DNS server (those will always take precedence over records received via Zeroconf), but it can be a problem for negative DNS responses (&lt;code&gt;NXDOMAIN&lt;/code&gt;): When the resolving library receives one of those, it will try a Zeroconf lookup, and this can take a while – especially for a host that does not exist.&lt;/p&gt;
&lt;p&gt;Since Zeroconf is only rarely used on Linux and is almost always limited to the &lt;code&gt;.local&lt;/code&gt; top-level domain, this behavior seems useless at best, and can be pretty irritating.&lt;/p&gt;
&lt;p&gt;To fix it, you can simply disable the Zeroconf DNS lookups in the configuration file &lt;a href="http://man7.org/linux/man-pages/man5/nsswitch.conf.5.html"&gt;&lt;code&gt;/etc/nsswitch.conf&lt;/code&gt;&lt;/a&gt; by changing the line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="n"&gt;mdns4_minimal&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NOTFOUND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt; &lt;span class="n"&gt;mdns4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;myhostname&lt;/span&gt; &lt;span class="n"&gt;mdns4_minimal&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NOTFOUND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;dns&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This doesn't entirely disable Zeroconf – it only restricts the lookups to the &lt;code&gt;.local&lt;/code&gt; domain, which is almost always the only place where they are useful anyway.&lt;/p&gt;
&lt;p&gt;The effects should be immediately noticeable – just try to ping one of the previously slow to respond hosts and check if the ICMP requests are still limited to one per second.&lt;/p&gt;
&lt;p&gt;If you think that this should be the default configuration for Ubuntu, you are not alone – there &lt;a href="https://bugs.launchpad.net/ubuntu/+source/nss-mdns/+bug/94940"&gt;is a bug report&lt;/a&gt; on Ubuntu's bug tracker that describes the problem, but since it's been known since 2007, I wouldn't bet on the default changing anytime soon.&lt;/p&gt;</summary><category term="network"></category><category term="linux"></category><category term="dns"></category></entry><entry><title>Thoughts on a cloud-based password synchronization service</title><link href="//blog.lxgr.net/posts/2013/10/24/thoughts-on-cloud-password-sync/" rel="alternate"></link><updated>2013-10-24T16:15:00+02:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-10-24:posts/2013/10/24/thoughts-on-cloud-password-sync/</id><summary type="html">&lt;p&gt;Today, Apple has enabled its cloud-based password synchronization service, iCloud Keychain. The service promises to safely store and synchronize passwords and other sensitive user data like credit card numbers among multiple devices. Apple claims that the information is protected with AES, but that alone is meaningless without knowing where that key is actually stored.&lt;/p&gt;
&lt;p&gt;As usual, there is not much public documentation, but there is a &lt;a href="http://support.apple.com/kb/HT5813?viewlocale=en_US"&gt;support document&lt;/a&gt; that contains some interesting propositions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adding a new device to an iCloud-synchronized Keychain displays a message on a previously registered device to accept or deny that new device. &lt;/li&gt;
&lt;li&gt;When enabling Keychain sync, the user is given an option to create a backup code.&lt;/li&gt;
&lt;li&gt;With the backup code, it's possible to recover the Keychain contents without the original device; without the code, (supposedly) not even Apple can access the contents.&lt;/li&gt;
&lt;li&gt;The number of times a user can enter the security code is limited; Apple support can extend the limit, but eventually, the Keychain data will be deleted from the server.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Starting from those propositions alone, I was wondering how it might be possible to implement a password storage and synchronization service that has all those properties. Is there a way to enable such a service without simply storing the AES key on the servers, and using the user password to retrieve it together with the data? The following is based on speculation alone; I haven't done any reverse engineering on the actual Keychain software or protocol.&lt;/p&gt;
&lt;p&gt;The first statement about adding a new device sounds like there is some kind of key exchange going on, which the user can allow or deny. The new device could present a public key to the original device, and the old device could then encrypt the AES key with that public key. (Every iOS device already has at least one RSA key in the form of a certificate signed by Apple's certificate authority.) Without any kind of fingerprint verification, there is no way to verify that the public key actually belongs to the new device and not to some third party, though. &lt;/p&gt;
&lt;p&gt;Disregarding any possible MITM attacks on the key exchange, this way of adding new devices could be used to safely share the password database and its encryption key among many devices. The shared key can also be used for efficient synchronization of future modifications to the database.&lt;/p&gt;
&lt;p&gt;The second and third statements about the backup code sounds like a way to store a copy of the database encryption key on the server, which might be wrapped with yet another key derived from the backup code. The default strength of the backup code is only a four-digit number, which even when used with PBKDF2 with many iterations is barely more secure than plaintext, but it can be changed to a more secure alphanumeric password. When using a reasonably secure passphrase, this makes it impossible for the service provider to access the database contents.&lt;/p&gt;
&lt;p&gt;The fourth claim about a limit to the number of attempts to enter the backup code could be implemented with a secure hash function. When the backup code is first created, it is not only used as an input to a key derivation function which is then used to wrap the database encryption key before it is sent to the server, but also hashed (optionally with a salt and a number of iterations). The resulting hash is also transmitted to the server together with the wrapped backup key.&lt;/p&gt;
&lt;p&gt;When the user later initiates a database restore, the server first transmits the salt (if there is one) to the client. The user then enters the backup code on the device, where it is hashed with the salt, and transmitted back to the server. Only when the response to that challenge is identical to the response stored on the server, the actual database will be sent to the client in its encrypted form. This way, the number of backup code attempts per second can be rate-limited on the server side.&lt;/p&gt;
&lt;p&gt;This would make it possible to prevent brute-force attacks on a weak backup code for other clients. Of course, it doesn't help against an untrustworthy service provider, who will be able to brute-force the encryption key without any limitation, since he necessarily holds the backup copy of the database and its wrapped encryption key.&lt;/p&gt;
&lt;p&gt;I would be very interested in a detailed protocol analysis of Apple's solution, like the one that was recently published about the iMessage protocol. Using an architecture like the one lined out above would put Apple in a similar position as for iMessage with regards to lawful interception: While government access would be possible via a MITM-attack on the device setup procedure, it wouldn't be as simple as demanding the user database and the according encryption key. Everything else would more or less invalidate the unambiguous statement (as quoted from the &lt;a href="http://support.apple.com/kb/HT5813?viewlocale=en_US"&gt;support page for iCloud Keychain&lt;/a&gt;) regarding Apple's capabilities: "If you choose to not create an iCloud Security Code, Apple will not be able to recover your iCloud Keychain."&lt;/p&gt;
&lt;p&gt;Of course, if a user choses to use a four-digit numeric backup code (which is the proposed default by the setup wizard), the details of the implementation are rendered moot: There is no way such a weak password can provide any security against brute force attacks using any practical combination of hash function and iteration count. (This is probably also the reason why the service implements a rate-limiting feature for recovery access.) It would have been in the interest of Apple's user base to provide a strong, randomly generated alphanumeric string as a backup code by default, &lt;a href="https://support.mozilla.org/en-US/kb/firefox-sync-data-secure-find-out-more"&gt;like Mozilla does&lt;/a&gt; for their bookmark synchronization service.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update (2013-10-30):&lt;/strong&gt;
Ars Technica has published an &lt;a href="http://arstechnica.com/information-technology/2013/10/apple-claim-that-icloud-can-store-passwords-only-locally-seems-to-be-false/"&gt;interesting article&lt;/a&gt; on the topic, with similar conclusions. They claim that there is a different recovery process depending on whether a four-digit security code or an actual high-entropy password is used, which is somewhat strange (if there is really no server-side brute-force protection for alphanumeric passwords, a four-digit passcode could actually provide better protection than a five-character alphanumeric password). Using a high-entropy password seems like the better choice in any case.&lt;/p&gt;</summary><category term="security"></category></entry><entry><title>Safe deterministic (EC)DSA signatures are coming to OpenSSL</title><link href="//blog.lxgr.net/posts/2013/08/30/deterministic-dsa-signatures-openssl/" rel="alternate"></link><updated>2013-08-30T00:37:00+02:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-08-30:posts/2013/08/30/deterministic-dsa-signatures-openssl/</id><summary type="html">&lt;p&gt;By now, everybody involved in implementing algorithms using the DSA or the ECDSA signature schemes should &lt;em&gt;really&lt;/em&gt; understand &lt;a href="http://tools.ietf.org/html/rfc6979"&gt;the importance of a proper secret nonce&lt;/a&gt; as one of the inputs for a signature.&lt;/p&gt;
&lt;p&gt;This is easy to get wrong, both because PRNGs &lt;a href="http://www.debian.org/security/2008/dsa-1571"&gt;are&lt;/a&gt; &lt;a href="http://kakaroto.homelinux.net/2012/01/how-the-ecdsa-algorithm-works/"&gt;really&lt;/a&gt;, &lt;a href="http://jbp.io/2013/08/15/android-securerandom-guess/"&gt;really&lt;/a&gt;, &lt;a href="http://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.html"&gt;really&lt;/a&gt; &lt;a href="http://armoredbarista.blogspot.com/2013/03/randomly-failed-weaknesses-in-java.html"&gt;hard&lt;/a&gt; to get right, and because not everybody implementing/using (EC)DSA expected to be needing randomness just for &lt;em&gt;signing stuff&lt;/em&gt; (as opposed to creating key pairs).&lt;/p&gt;
&lt;p&gt;Fortunately, there is a way out. &lt;a href="http://crypto.stackexchange.com/users/452/poncho"&gt;Poncho on Stackexchange Crypto&lt;/a&gt; has notified me about &lt;a href="http://tools.ietf.org/html/rfc6979"&gt;an interesting RFC&lt;/a&gt; in the comments on a &lt;a href="http://crypto.stackexchange.com/a/9939/2538"&gt;nice answer&lt;/a&gt; to a related question.&lt;/p&gt;
&lt;p&gt;The really clever idea is that there is another way to (probabilistically) ensure that a secret nonce is used for every signature than just using a PRNG and hoping for the best.&lt;/p&gt;
&lt;p&gt;Since reusing the same nonce for &lt;em&gt;the same message&lt;/em&gt; signed by the same key will always give the same signature as an output (there are no other inputs to the signature algorithm), we just have to guarantee that the nonce is different and unpredictable for &lt;em&gt;different&lt;/em&gt; messages.&lt;/p&gt;
&lt;p&gt;By using a hash of the message and the private key as the nonce, these conditions can be satisfied even without a proper PRNG. Even better, it's possible to hash them together with some random data to provide backwards compatibility to implementations that react badly to deterministic (EC)DSA signatures. (Maybe some regression tests might interpret the lack of randomness as a fatal design flaw.)&lt;/p&gt;
&lt;p&gt;An (informal) RFC is nice, but actual code is even nicer, so I'm very happy that &lt;a href="http://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=190c615d4398cc6c8b61eb7881d7409314529a75"&gt;a patch&lt;/a&gt; implementing this method and &lt;em&gt;making it the default&lt;/em&gt; in OpenSSL has already been accepted to the development version.&lt;/p&gt;
&lt;p&gt;If you're interested in the details, there's &lt;a href="https://www.imperialviolet.org/2013/06/15/suddendeathentropy.html"&gt;a blog post&lt;/a&gt; by the author that has some more details.&lt;/p&gt;
&lt;p&gt;I'm really looking forward to this patch shipping in a lot of OpenSSL binaries, whether as a part of a distribution or embedded in some other software – there have been more than enough fatal PRNG(EC)DSA failures in the past for my liking.&lt;/p&gt;</summary><category term="security"></category></entry><entry><title>TLS client certificates and Mobile Safari</title><link href="//blog.lxgr.net/posts/2013/08/27/tls-client-certs-safari/" rel="alternate"></link><updated>2013-08-27T16:02:00+02:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-08-27:posts/2013/08/27/tls-client-certs-safari/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Update (2013-08-31):&lt;/strong&gt; Apple has asked me to refrain from publishing any details on this security-relevant bug for the time being; I hope that a fix will be released soon. When that happens (or after a reasonable amount of time has passed), the original post will be restored.&lt;/p&gt;
&lt;p&gt;Until then, I would strongly advise against using Mobile Safari when any X.509 client certificates are stored on an iOS device, e.g. an S/MIME encryption/signing certificate. Other in iOS, like Chrome, are not affected; neither are browsers on OS X (including Safari).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second update (2013-10-23):&lt;/strong&gt; Since my original post, iOS 7 has been released; the bug described below seems to have been fixed. The issue is of course still present in iOS &amp;lt;= 6.1.4. Since it seems to be Apple's policy not to release security fixes for discontinued OS versions, this leaves older devices like the original iPad and the iPod touch (up to the 4th generation) vulnerable. That's unfortunate, but since I'm definitely not the only one who knows about the issue, here is my original post. Be sure to take care when using any client certificates on an older iOS device.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; If you have an S/MIME or other X.509 client certificate installed on your iOS device, Mobile Safari will hand it out to any web server that asks for it – without asking you.&lt;/p&gt;
&lt;p&gt;Recently, I've looked into TLS with client certificates, specifically into how the various browsers and operating systems implement them.&lt;/p&gt;
&lt;p&gt;In addition to authenticating a server and securing a connection between this server and an anonymous client, TLS also allows the client to identify itself to the server using its own X.509 certificate. This mode is only used by very few services using TLS, which could be attributed to the difficulty of issuing client certificates in the first place, and protecting them against both theft and loss later on.&lt;/p&gt;
&lt;p&gt;However, I think that there are more issues with client certificates than that.&lt;/p&gt;
&lt;p&gt;First of all, the client certificate is transmitted to the server &lt;a href="https://tools.ietf.org/html/rfc5246#section-7.4.4"&gt;unencrypted&lt;/a&gt;, which means that everybody between the client and the server is able to identify the user trying to connect. Since an X.509 certificate frequently contains personal information like the user's full name and mail address,this seems like a bad thing to do.&lt;/p&gt;
&lt;p&gt;Additionally, TLS client certificates are used in a way that doesn't provide &lt;a href="http://en.wikipedia.org/wiki/Deniable_authentication"&gt;deniable authentication&lt;/a&gt;. To prove that the client is in posession of the private key corresponding to the X.509 certificate, he &lt;a href="https://tools.ietf.org/html/rfc5246#section-7.4.8"&gt;signs all previous handshake messages&lt;/a&gt;. Among other things, this contains a (client-provided) timestamp and the server certificate; the signature of those values &lt;a href="http://crypto.stackexchange.com/questions/5455/does-a-trace-of-ssl-packets-provide-a-proof-of-data-authenticity"&gt;can be used to prove&lt;/a&gt; that that somebody with access to the private key initiated a connection to a specific server at a specific time. Even worse, this signature is also still transmitted in plaintext (symmetric encryption and authentication aren't used before the next message (Finished) in the handshake.&lt;/p&gt;
&lt;p&gt;Considering those (in my opinion substantial) disadvatages of the implementation of client certificate authentication in the current version of TLS, it might be better to perform authentication inside the secure TLS channel at the application layer, which is exactly how it's done for the vast majority of web services (via HTTP cookies) and other protocols protected by TLS.&lt;/p&gt;
&lt;p&gt;(An even better solution would be a TLS extension that moves the client authentication inside the secure channel, or even uses something analogous to the server authentication in TLS, which might be able to provide deniable authentication for the client as well. But the rate at which TLS extensions and updates are adopted by software vendors is not exactly instantaneous.)&lt;/p&gt;
&lt;p&gt;Since the status quo seems to be exactly that (whether that's due to the difficulty of issuing certificates or to the mentioned disadvantages of them with TLS), is there anything left to worry about?&lt;/p&gt;
&lt;p&gt;There is: Broken browsers.&lt;/p&gt;
&lt;p&gt;Probably due to their minimal use in real-word applications, some browsers' TLS client certificate implementations are a bit sloppy. When an HTTP server requests a client certificate (using the &lt;a href="https://tools.ietf.org/html/rfc5246#section-7.4.4"&gt;Certificate Request&lt;/a&gt; message in the TLS handshake), most of them display a pretty technical-looking dialog to the user, who might or might not understand what's going on.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chrome's client certificate selection dialog" src="//blog.lxgr.net/images/chromecert.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is clearly not an example of good user experience. So let's check how Apple does it in iOS...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mobile Safari's lack of a certificate selection dialog" src="//blog.lxgr.net/images/ioscert.png" /&gt;&lt;/p&gt;
&lt;p&gt;Oops. They don't. They just pick the first certificate available (in my case, this is an S/MIME certificate that includes my full name, my employer and my e-mail address), transmit it and authenticate to the server by non-repudiably signing the TLS handshake – all in plaintext. All the previously mentioned caveats apply, only that the user has no choice about the matter in the first place.&lt;/p&gt;
&lt;p&gt;If you want to try it yourself, just visit &lt;a href="https://www.mikestoolbox.net/"&gt;Mike's Toolbox&lt;/a&gt; with Mobile Safari, accept the self-signed server certificate and look for your name or e-mail address on that page.&lt;/p&gt;
&lt;p&gt;This problem has been mentioned before publicly &lt;a href="http://forums.whirlpool.net.au/archive/1936101"&gt;at least once&lt;/a&gt;, more than one year and one major OS version ago. On the desktop, this has already been fixed (with &lt;a href="http://support.apple.com/kb/HT1679"&gt;OS X 10.5.3&lt;/a&gt;); I'm really hoping it will be fixed with iOS 7 as well.&lt;/p&gt;</summary><category term="security"></category><category term="ios"></category></entry><entry><title>Android's SecureRandom - not even nonce</title><link href="//blog.lxgr.net/posts/2013/08/15/android-securerandom-not-even-nonce/" rel="alternate"></link><updated>2013-08-15T15:30:00+02:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-08-15:posts/2013/08/15/android-securerandom-not-even-nonce/</id><summary type="html">&lt;p&gt;There has been a bit of drama about the &lt;a href="https://bitcointalk.org/index.php?topic=271486.0"&gt;theft of some 55 Bitcoins&lt;/a&gt; (worth about $5500 at the current exchange rate), with the common denominator that all of the corresponding private keys were stored in Android wallets. While this is not nearly the first case of Bitcoin theft, it is probably the first one that is a direct result of a crypto bug.&lt;/p&gt;
&lt;p&gt;In this case, the problem resulted from the (re)use of the nonce used in the elliptic curve signatures that are used to generate Bitcoin transactions. As everybody familiar with (or even implementing) ECC-based encryption schemes should know well by know, reusing the signature nonce, or using a predictable value even once, &lt;a href="http://blog.cryptographyengineering.com/2012/03/surviving-bad-rng.html"&gt;results in catastrophic failure&lt;/a&gt;: The private key can then be trivially calculated from the signature(s). (If you don't believe me, just ask Sony...) This seems to be the method that was used to steal the Bitcoins in question.&lt;/p&gt;
&lt;p&gt;So far, so bad. The obvious question now is: Who was responsible for reusing the nonces in the first place? Since the flaw is not limited to a single wallet implementation, but only occurs on Android (even though some of the Bitcoin libraries are also used on desktop bitcoin clients), people quickly came to the conclusion that there must be a flaw in one of Android's cryptographic libraries.&lt;/p&gt;
&lt;p&gt;In &lt;a href="http://permalink.gmane.org/gmane.comp.bitcoin.devel/2714"&gt;an announcement&lt;/a&gt; to the Bitcoin dev mailing list, Mike Hearn, the developer of the Java library bitcoinj announced that the offender in question is the class &lt;code&gt;SecureRandom&lt;/code&gt; of the Android framework. The various wallets for Android were quickly patched to avoid that class and use &lt;code&gt;/dev/urandom&lt;/code&gt; directly, and as far as their developers and users are concerned, the problem is now solved.&lt;/p&gt;
&lt;p&gt;However, when there is a bug in a security primitive implemented in a such widely used library, chances are that other users are also affected. So what exactly went wrong, and what are the implications?&lt;/p&gt;
&lt;p&gt;Shortly after the announcement of the bug, people were quick to point to &lt;a href="http://armoredbarista.blogspot.com.au/2013/03/randomly-failed-weaknesses-in-java.html"&gt;a paper discussing several vulnerabilities&lt;/a&gt; of the &lt;code&gt;SecureRandom&lt;/code&gt; implementations of various Java frameworks, among them Apache Harmony, which is the base for Google's Android framework. &lt;/p&gt;
&lt;p&gt;Indeed, Android &lt;a href="http://androidxref.com/4.3_r2.1/xref/libcore/luni/src/main/java/org/apache/harmony/security/provider/crypto/SHA1PRNG_SecureRandomImpl.java"&gt;uses that implementation&lt;/a&gt; - but only up to and including version 4.1. Additionally, according to the paper, the flaw limits the entropy of an instance of &lt;code&gt;SecureRandom&lt;/code&gt; to 64 bits of entropy. This is not enough for cryptographic applications like key generation or nonces, but also doesn't explain why in many cases, the exact same values were generated. &lt;a href="http://en.wikipedia.org/wiki/Birthday_problem"&gt;On average&lt;/a&gt;, 2^32 transactions would have to be generated to yield a single collision – all of those with the same key, e.g. bitcoin address.&lt;/p&gt;
&lt;p&gt;Another problem of the Harmony implementation of &lt;code&gt;SecureRandom&lt;/code&gt; is that using &lt;code&gt;setSeed()&lt;/code&gt; on an instace replaces the existing entropy in the generator (instead of being mixed securely combined with it). When used wrongly (e.g. by seeding with not-so-random data), this could also lead to predictable values generated by the instance. (This behavior was even used by some applications to use &lt;code&gt;SecureRandom&lt;/code&gt; together with a deterministic seed as some kind of key storage facility. Madness, I know...)&lt;/p&gt;
&lt;p&gt;With Android 4.2, Google &lt;a href="http://android-developers.blogspot.co.at/2013/02/security-enhancements-in-jelly-bean.html"&gt;finally switched&lt;/a&gt; to &lt;a href="http://androidxref.com/4.3_r2.1/xref/libcore/luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLRandom.java"&gt;a different implementation based on OpenSSL&lt;/a&gt;. Since then, calls to the &lt;code&gt;setSeed()&lt;/code&gt; method augment the internal entropy, instead of replacing it, as it should be. The new generator is even used when specifically asking for the Harmony-based one; obviously somebody at Google regarded the flaws important enough to allow modifying the behavior of legacy apps. (Of course, &lt;a href="http://android-developers.blogspot.co.at/2013/02/using-cryptography-to-store-credentials.html"&gt;this broke all off-label usages&lt;/a&gt; of &lt;code&gt;SecureRandom&lt;/code&gt; in the process).&lt;/p&gt;
&lt;p&gt;So, Android versions from 4.2 should be safe, right? As it turns out, &lt;a href="http://android-developers.blogspot.co.at/2013/08/some-SecureRandom-thoughts.html"&gt;they are not&lt;/a&gt;. In some circumstances (I haven't looked at the source yet), the new &lt;code&gt;SecureRandom&lt;/code&gt; implementation goes horribly, horribly wrong and returns identical values for successive invocations. This is obviously very bad, not only for Bitcoin wallets, but basically for everybody using the Java cryptographic operations. According to the Android devs, that includes Key generation of symmetric and asymmetric keys (using the &lt;code&gt;KeyGenerator&lt;/code&gt;, &lt;code&gt;KeyPairGenerator&lt;/code&gt; and &lt;code&gt;KeyAgreement&lt;/code&gt; classes).&lt;/p&gt;
&lt;p&gt;Ironically, using &lt;code&gt;setSeed()&lt;/code&gt; with proper random data with the OpenSSL implementation avoids the bug, which leads to the interesting situation that using &lt;code&gt;setSeed()&lt;/code&gt; is discouraged for Android 4.1 and earlier, but is essential for 4.2. (Android 4.3 seems to avoid both bugs, according to the code in the blog post). The Android developers were kind enough to provide a ready-to-use mitigation in the form of a drop-in replacement for &lt;code&gt;SecureRandom&lt;/code&gt; that does exactly that. (You should probably still be careful for older Android versions using the Harmony implementation – all the caveats for that mentioned in the paper still apply.)&lt;/p&gt;
&lt;p&gt;Every Android developer using one of the affected classes should evaluate their usage, implement &lt;a href="http://android-developers.blogspot.co.at/2013/08/some-SecureRandom-thoughts.html"&gt;the workaround&lt;/a&gt; and necessary countermeasures, which could include warning your users to replace any keys generated with the weak random number generator, which is exactly what the developer of Bitcoin Wallet for Android &lt;a href="https://code.google.com/p/bitcoin-wallet/source/detail?r=d9f996e218dd50c58855872c761e4acdd1ea1d15"&gt;did&lt;/a&gt; promptly after learning about the vulnerability (the update generates a new, secure Bitcoin address and immediately transfers all funds to it after the update). If you don't trust any of the Android implementations of &lt;code&gt;SecureRandom&lt;/code&gt; anymore, you should take a look at &lt;a href="https://code.google.com/p/bitcoin-wallet/source/browse/wallet/src/de/schildbach/wallet/util/LinuxSecureRandom.java"&gt;his implementation&lt;/a&gt; based directly on &lt;code&gt;/dev/urandom&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As a user, you should check if there is an update available for any of your security-relevant applications, and when in doubt, stop using keys generated on one of the vulnerable Android versions (Android 4.2, and to a lesser degree also everything from before – the 64-bits of entropy again). I plan to evaluate some of the obvious candidates like ConnectBot myself.&lt;/p&gt;
&lt;p&gt;This is my preliminary analysis on the situation - if you have anything to share on the matter, or have spotted some wrong conclusions in my argumentation, please leave your comment below or drop me a message!&lt;/p&gt;
&lt;p&gt;A side note on the Bitcoin side of the ECC nonce problem: The original Bitcoin implementation elegantly avoids the problem, since it only reveals the public key at the moment of a transaction, and sends the "change" to a newly generated address, to which the ECC key remains unknown until the next transaction. This doesn't apply universally (for example if you receive transactions to an address which you have already used to send coins previously, e.g. well-known donation address; special transactions directly to public keys are also not protected). Since the method is based on a cryptographic hash of the public key, it even provides some protection against quantum-computing based attacks. I wonder what the exact motivation of the creators for using hashes was, but it sure is a nice trick! Unfortunately, bitcoinj currently sends all change to the original address, to which the key has already been revealed, which is why the attack worked in the first place. But there is a good reason to do this: Until we get deterministic address generation, ad-hoc creating addresses to transfer the change to makes wallet backups difficult and is prone to inadverted loss of private keys. But this is probably the topic of another blog post.&lt;/p&gt;</summary><category term="security"></category><category term="android"></category></entry><entry><title>Uninitialized buffers in OpenGL</title><link href="//blog.lxgr.net/posts/2013/05/20/uninitialized-buffers-in-opengl/" rel="alternate"></link><updated>2013-05-20T21:25:00+02:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-05-20:posts/2013/05/20/uninitialized-buffers-in-opengl/</id><summary type="html">&lt;p&gt;As I've mentioned in my last article, I'm interested in the implementation details and the security of open and closed-source GPU drivers.&lt;/p&gt;
&lt;p&gt;In addition to the security implications of the model that is used by some of the current drivers (they allow the OpenGL client to send commands directly to the GPU, with the kernel only checking for illegal address references in the command stream, instead of using an actual IOMMU), there is a much simpler way to cause mischief when given access to an accelerated OpenGL implementation on a system: Uninitialized buffers.&lt;/p&gt;
&lt;p&gt;Normally, when requesting memory from the operating system (for example through the malloc standard library function, which in turn uses an anonymous, private mmap memory mapping), the kernel goes through the effort of zeroing out the contents of the newly allocated chunk of main memory. While this is not required by the C language specification in any way, and one should never rely on that implementation detail (smaller allocations could be handled by the library in a different way, and those are not guaranteed to be zero-initialized), it's a pretty important &lt;a href="http://stackoverflow.com/questions/1622196/malloc-zeroing-out-memory"&gt;security feature&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Just imagine what would happen if the physical memory block used to be allocated to your browser, and contained the session cookie for an online banking session, or worse, an instance of GPG, containing your private key... And while most security-relevant code will probably go to great lengths to avoid that kind of thing from happening by overwriting the relevant memory locations before deallocating them, there is always the possibility of application crashes, which will render those protections useless.&lt;/p&gt;
&lt;p&gt;All in all, that operating system feature is really essential to guarantee the isolation among different users who are working on the same machine simultaneously. (As a side note, &lt;a href="http://lwn.net/Articles/322823/"&gt;a similar thing&lt;/a&gt; is performed for some file systems, which don't zero out newly-allocated blocks, but use a different method to achieve a similar effect, and to prevent users from gaining access to residual chunks of data in case of a system crash during the allocation.)&lt;/p&gt;
&lt;p&gt;I was expecting the same thing to happen for GPU driver implementations, since nowadays, many window managers use OpenGL acceleration to draw the window contents to the right locations with various effects like transparency or animated window switching. Basically, the window content is stored as an OpenGL texture, which is later mapped to a rectangle on the graphical desktop. So, in many cases, their content is at least as security-critical as the content of main memory – just think about your terminal's or browser's window content. Well, it turns out I was wrong:&lt;/p&gt;
&lt;p&gt;&lt;img alt="An uninitialized OpenGL texture" src="//blog.lxgr.net/images/gl-buffer-res.png" /&gt;&lt;/p&gt;
&lt;p&gt;This screenshot shows a simple OpenGL demonstration program, which I modified just a tiny bit: I removed the part that loads the cube texture from memory, or more accurately, replaced the pointer to the image data with a null pointer (which seems to be allowed by the OpenGL specification). It is implementation-defined whether that means that the buffer should be zero-initialized, or can remain uninitialized – and the &lt;a href="http://nouveau.freedesktop.org/wiki/"&gt;nouveau&lt;/a&gt; driver for my Nvidia card seems to do the latter, apparently for performance reasons.&lt;/p&gt;
&lt;p&gt;I asked the nouveau developers in the IRC channel for their view on the topic, and Dave Airlie told me that while video buffers in the main memory should be zero-initialized on nouveau, buffers residing in video memory are not overwritten by default, while theoretically possible.&lt;/p&gt;
&lt;p&gt;On integrated GPUs that use the main memory for all of their buffers, the problem could be even more severe – not only the content of other user's windows, but even arbitrary memory contents could be theoretically extracted with custom shader code. I retried the experiment on an Intel GPU, and was relieved to only see an untexturized black cube. The same thing happens on Android, where I tried it on both an Adreno- and an Nvidia Tegra–equipped device. However, this does not mean that those platforms are safe – it only means that somewhere in their OpenGL implementation, the buffer is zeroed, which might as well happen only in the userspace library, and could therefore be circumvented by directly interfacing with the command buffer (which is admittedly much more difficult, and might well be impossible for things like WebGL, where direct access to those buffers is not possible for application code).&lt;/p&gt;
&lt;p&gt;One possible mitigation for that security risk is very simple, and therefore widely used: Just don't give access to the video hardware to anyone but users that are physically present. Many Linux distributions do just that with the &lt;code&gt;allowed_users=console&lt;/code&gt; setting of the &lt;code&gt;Xwrapper.config&lt;/code&gt; configuration file. This reduces the attack surface significantly – most computers are only used for desktop logins by a single person at a time, and anybody who is able to run software in that user's X session (which seems to be an &lt;a href="http://dri.freedesktop.org/wiki/DRM/"&gt;additional requirement&lt;/a&gt; for GPU hardware access, at least on DRI/DRM) has much easier ways to grab arbitrary window contents.&lt;/p&gt;
&lt;p&gt;But with WebGL becoming more and more popular, that situation is changing – now, web page authors can execute OpenGL code on any visitor's GPU hardware, and read back the content of the resulting images (with limits imposed by the same-origin policy). This might be one of the reasons why WebGL &lt;a href="http://www.khronos.org/webgl/security/#Access_to_Uninitialized_Memory"&gt;specifically mandates&lt;/a&gt; that implementations clear their buffers before allocation. That's obviously a very good idea, seeing that there is even a &lt;a href="http://www.contextis.com/research/blog/webgl-more-webgl-security-flaws/"&gt;working exploit&lt;/a&gt; for that particular loophole! Now let's hope that all browser vendors read that part of the specification carefully, and we should be safe – but only against that specific security threat of running untrusted code on hardware with direct access to the main memory...&lt;/p&gt;</summary><category term="gpu"></category><category term="linux"></category><category term="drivers"></category><category term="opengl"></category></entry><entry><title>Graphics processing in hardware and software</title><link href="//blog.lxgr.net/posts/2013/05/10/graphics-processing-hardware-software/" rel="alternate"></link><updated>2013-05-10T20:23:00+02:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-05-10:posts/2013/05/10/graphics-processing-hardware-software/</id><summary type="html">&lt;p&gt;I've got a peculiar hobby: I like to worry about very specific implementation details of technologies I don't really understand at all; one of them being GPUs and graphics drivers.&lt;/p&gt;
&lt;p&gt;On one hand, it's really simple: In almost every computing device, there is a GPU. This is basically a programmable, special-purpose, massively parallel CPU, and until recently, its only purpose was drawing triangles in different colors; and not just one or two, but lots of them – per second. Parts of it are dedicated to the triangle-drawing business, because that's still the most efficient way to do it, but most of the hard work happens in the programmable parts.&lt;/p&gt;
&lt;p&gt;Since every device seems to need a driver, there is one for every GPU. And how hard can &lt;em&gt;that&lt;/em&gt; be? Identify the triangle-drawing chip in question, figure out a way to talk to it, throw some triangle coordinates at it and marvel at the results.&lt;/p&gt;
&lt;p&gt;But the more I think and read about those two components, the more I get the impression that it might not be that simple.&lt;/p&gt;
&lt;p&gt;Concerning the GPU itself, I'm wondering what parts of the rendering pipeline (the process of interpreting large amounts of bits as triangle coordinates and textures and converting them to a rasterized 2D projection of a three-dimensional scene) are actually still happening in dedicated circuits, and how much of it really happens on general purpose CPUs, programmed by firmware internal to the GPU or possibly even the driver, and therefore the CPU. From what I've learned so far (mostly by reading lots of introductions to &lt;a href="http://duriansoftware.com/joe/An-intro-to-modern-OpenGL.-Table-of-Contents.html"&gt;OpenGL&lt;/a&gt;, &lt;a href="http://fgiesen.wordpress.com/2011/07/09/a-trip-through-the-graphics-pipeline-2011-index/"&gt;modern GPUs&lt;/a&gt;, &lt;a href="https://01.org/linuxgraphics/documentation/driver-documentation-prms"&gt;technical documentations&lt;/a&gt; and &lt;a href="http://kernel.org/"&gt;source code&lt;/a&gt;, everything is possible – there are software renderers that run as software on the shaders of a GPU, and, on the other end of the spectrum, "hardware" components that are fed with ASCII representations of OpenGL shaders (with the help of &lt;a href="http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=MTIxNDk"&gt;not-so-open source drivers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some GPUs need &lt;a href="http://phoronix.com/forums/showthread.php?38445-Confused-by-firmware"&gt;blobs of firmware&lt;/a&gt; in order to do their job (which hints to a partial software-like approach to the problem); others &lt;a href="http://phoronix.com/forums/showthread.php?79473-Digging-Deeper-Into-AMD-s-UVD-Code-Drop&amp;amp;p=323934#post323934"&gt;don't&lt;/a&gt; – but that doesn't say anything, since firmware can also be stored inside of a chip, similar to the microcode of common "CISC" CPUs.&lt;/p&gt;
&lt;p&gt;The more I think about that, the more I realize that, for this topic as for almost every other technical subject, there is no easy or general answer, and finding it the hard way takes lots of time, and also luck with finding the right documentation. Which brings me to the topic open source graphics drivers.&lt;/p&gt;
&lt;p&gt;Since most of the magic seems to be happening at least partially in software, whether on the host CPU or in embedded DSPs of the GPU (though I realize that there are quite a few ASICs left), there is an understandable, but still annoying tendency of GPU vendors to treat their driver software with as much secrecy as their actual hardware products – simply because that actual product is actually the combination of the chip and the driver.&lt;/p&gt;
&lt;p&gt;This brings us the obvious problems that all closed-source drivers share: We have no way of fixing problems when they arise, and also no way of making assertions, or even educated guesses, about the security properties of a software that runs with the highest privileges possible on millions, possibly billions, of machines storing sensitive data, both commercial and private.&lt;/p&gt;
&lt;p&gt;Apart from actual vulnerabilities in the driver code running on the CPU, I'm &lt;a href="http://security.stackexchange.com/questions/35634/is-opengl-a-security-problem"&gt;wondering&lt;/a&gt; to what extent processes running on the GPU itself can access the main memory of the system, and how the various drivers ensure that such memory accesses don't circumvent the process separation that is now commonplace on most operating systems thanks to the memory virtualization provided by the combination of the memory management unit of the CPU and the security mechanisms of the operating system kernel.&lt;/p&gt;
&lt;p&gt;Since shaders, the programs running on the GPU execution units, can be provided in source and sometimes also binary form by any user of the graphics (OpenGL) or general purpose (OpenCL) API, memory accesses of those shaders have to be obviously limited to something less than the whole system memory space. There seem to be two approaches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For some GPU drivers, that protection is provided by the driver verifying all commands that are submitted from the user space to the GPU. It checks for illegal memory accesses and other potentially dangerous operations.&lt;/li&gt;
&lt;li&gt;Other, mostly newer models provide a hardware MMU themselves that can be programmed by the operating system or the driver to disallow all memory accesses, except for the ones for data that is located in buffers owned by the same user.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;According to a &lt;a href="http://phd.mupuf.org/files/fosdem2013_drinext_drm2.pdf"&gt;presentation on the subject&lt;/a&gt;, the first approach is currently used by the Linux drivers for AMD and Intel GPUs, while the second one seems to be only supported by the open nouveau driver for Nvidia GPUs.&lt;/p&gt;
&lt;p&gt;The situation for OpenGL on Android seems different, even though it also uses the Linux kernel: Due to &lt;a href="https://android.googlesource.com/kernel/tegra/+/android-tegra3-grouper-3.1-jb-mr1-fr/drivers/gpu/ion/"&gt;some references&lt;/a&gt; in the Kernel source code of almost all Android platforms which I examined, I suspect that most or all of the Android drivers actually use an IOMMU, that is, the hardware approach to the problem. I suspect that this is because it allow the mobile GPU vendors to open-source the Kernel portion of their drivers – the verification approach can obviously only be executed in the Kernel (or a trusted userspace daemon, with even more overhead), and needs a lot of knowledge about the format of the command stream sent to the GPU, which would thereby be openly documented.&lt;/p&gt;
&lt;p&gt;As I've mentioned, most of the drivers are released as closed-source by their vendors (with Intel and possibly (I've not done any research on them) AMD being a laudable exception), but there are some open-source alternatives, most of them are created by tediously &lt;a href="http://blog.emmanueldeloget.com/index.php?post/2013/03/08/The-SoC-GPU-driver-interview"&gt;reverse-engineering the GPUs&lt;/a&gt;. At least for Nvidias Tegra line of mobile GPUs, that might change, though; after &lt;a href="http://www.wired.com/wiredenterprise/2012/06/torvalds-nvidia-linux/"&gt;fingers having been pointed&lt;/a&gt; at each other, Nvidia finally seems to &lt;a href="http://www.phoronix.com/scan.php?page=news_item&amp;amp;px=MTE5MTc"&gt;release a bit more&lt;/a&gt; to the open source community in the form of both documentation and actual code commits. &lt;a href="http://lwn.net/Articles/467769/"&gt;One of them&lt;/a&gt; is especially interesting to me, since it confirms the IOMMU approach being used. On the mainline Linux kernel, it also &lt;a href="https://gitorious.org/linux-tegra-drm/pages/Host1xIntroduction#Stream+validation"&gt;seems possible&lt;/a&gt; to use the stream validation approach.&lt;/p&gt;
&lt;p&gt;So what is my point? As I've said, I have a peculiar hobby, and somehow I find the topic of GPU drivers really interesting. I still don't know nearly enough even to be able to understand the Kernel source code, but I'll continue to try to get a clearer overview nevertheless. If you've got any hints for me, please go ahead and write me (blog at lxgr dot net)!&lt;/p&gt;</summary><category term="gpu"></category><category term="hardware"></category><category term="linux"></category><category term="drivers"></category></entry><entry><title>A quine in x86-64 assembly</title><link href="//blog.lxgr.net/posts/2013/05/10/a-quine-in-x86-64-assembly/" rel="alternate"></link><updated>2013-05-10T17:30:00+02:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-05-10:posts/2013/05/10/a-quine-in-x86-64-assembly/</id><summary type="html">&lt;p&gt;This summer term, I'm taking a really interesting course on computer security: While the lectures are pretty theoretical (one of the topics is a proof that shows that proving the general security properties of certain models is equivalent to the halting problem, which is done by implementing a turing machine within the access model...), the homeworks are partially about x86(-64) assembly programming. My only assembly programming experiences until now were with MMIX, which is almost completely on the opposite end of the RISC/CISC spectrum than the good old x86 (not to mention that the architecture is completely theoretical and has never been implemented in hardware). To make a long story short, I finally have a reason to program some x86 assembly!&lt;/p&gt;
&lt;p&gt;Our most recent exercise sounds quite simple, but kept me busy longer than I expected: We are supposed to write a quine in x86-64 assembly, that is, a program that has its own source code as its (only) output – identical to the last byte. I was already familiar with quines, but I had never tried to create one before, and if I had, assembly would definitely not have been my language of choice, but since it was one of two non-optional homework exercises, I figured that it couldn't be so hard after all. So without further ado, here is a quine in x86-64 assembly (GNU assembler syntax):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.att_syntax&lt;/span&gt; &lt;span class="no"&gt;noprefix&lt;/span&gt;
&lt;span class="na"&gt;.globl&lt;/span&gt; &lt;span class="no"&gt;main&lt;/span&gt;
&lt;span class="nl"&gt;main:&lt;/span&gt;
&lt;span class="nf"&gt;pushq&lt;/span&gt; &lt;span class="no"&gt;rbp&lt;/span&gt;
&lt;span class="nf"&gt;movq&lt;/span&gt; &lt;span class="no"&gt;rsp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;rbp&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;$.Cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;rdi&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;$0xa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;rsi&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;$0x22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;edx&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;$.Cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ecx&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;$0x22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;r8d&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;$0xa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;r9d&lt;/span&gt;
&lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="no"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;eax&lt;/span&gt;
&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="no"&gt;printf&lt;/span&gt;
&lt;span class="nf"&gt;xor&lt;/span&gt; &lt;span class="no"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;eax&lt;/span&gt;
&lt;span class="nf"&gt;leave&lt;/span&gt;
&lt;span class="nf"&gt;ret&lt;/span&gt;
&lt;span class="nl"&gt;.Cs:&lt;/span&gt; &lt;span class="na"&gt;.string&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.att_syntax noprefix&lt;/span&gt;
&lt;span class="s"&gt;.globl main&lt;/span&gt;
&lt;span class="s"&gt;main:&lt;/span&gt;
&lt;span class="s"&gt;pushq rbp&lt;/span&gt;
&lt;span class="s"&gt;movq rsp, rbp&lt;/span&gt;
&lt;span class="s"&gt;mov $.Cs, rdi&lt;/span&gt;
&lt;span class="s"&gt;mov $0xa, rsi&lt;/span&gt;
&lt;span class="s"&gt;mov $0x22, edx&lt;/span&gt;
&lt;span class="s"&gt;mov $.Cs, ecx&lt;/span&gt;
&lt;span class="s"&gt;mov $0x22, r8d&lt;/span&gt;
&lt;span class="s"&gt;mov $0xa, r9d&lt;/span&gt;
&lt;span class="s"&gt;xor eax, eax&lt;/span&gt;
&lt;span class="s"&gt;call printf&lt;/span&gt;
&lt;span class="s"&gt;xor eax, eax&lt;/span&gt;
&lt;span class="s"&gt;leave&lt;/span&gt;
&lt;span class="s"&gt;ret%c.Cs: .string %c%s%c%c&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It can be compiled, executed and verified for proper quine-ness like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gcc quine.s -o quine &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./quine &amp;gt; output &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; diff quine.s output
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As do most quines, this probably needs some explanation. Generally speaking, all quines (at least the ones I've come across) share a common structure: There is some code of the language in question, and one or more rather long strings, which contain most of that code in quoted form. The trick is to print the quoted code twice: Once verbatim, and once with quotation marks and some additional characters, so that the string declaration itself is printed out. To do that, the string quotation signs have to be escaped or stored in some modified form – otherwise, they would be interpreted simply as the end of the string.&lt;/p&gt;
&lt;p&gt;The most obvious guess is to just escape them with a backslash (like so: &lt;code&gt;\"&lt;/code&gt;), but that doesn't really help us – now we also have to print a backslash in our output! The solution here (and in many other quines) is to store them in another form that can be safely quoted verbatim inside of a string, but still evaluates to the desired character in the output. In this case, the &lt;code&gt;printf&lt;/code&gt; C library function is used to recreate two occurences of two otherwise problematic characters: The aforementioned quotation mark and the newline character. Both characters are stored as their numeric (or more specific, hexadecimal) representation according to the ASCII codepage: &lt;code&gt;0xa&lt;/code&gt; for the newline, and &lt;code&gt;0x22&lt;/code&gt; for the double quotation mark. All that I was able to learn from the very nice example for a quine in C given in the (German) &lt;a href="http://de.wikipedia.org/wiki/Quine_(Computerprogramm)"&gt;Wikipedia article on the subject&lt;/a&gt;, which also taught me the really neat trick of using the same string twice – once as a formatting string, and once again as one of the parameters of the &lt;code&gt;printf&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;My approach was then to find a valid translation for that quine to assembly, which revolved mostly around two problems: Generating the machine instructions for the &lt;code&gt;printf&lt;/code&gt; call, and escaping all occurences of problematic characters in the resulting program so that it can be stored as a valid string.&lt;/p&gt;
&lt;p&gt;The first part of the problem can be easily solved by some experimentation with a similar C program and by disassembling the binary as compiled by GCC (and identifying the relevant lines in the output!) – it boils down to moving the address of the string and the literal values of the ASCII characters to the right registers (according to the x86-64 calling convention) and executing the call.&lt;/p&gt;
&lt;p&gt;A minor detail of interest is the instruction &lt;code&gt;xor eax, eax&lt;/code&gt; right before the function call: As it turns out, functions with variable-length parameter lists like &lt;code&gt;printf&lt;/code&gt; expect the number of parameters passed to them in the &lt;code&gt;eax&lt;/code&gt; register; in this case, there are exactly zero. I can only speculate about the reasons for this part of the calling conventions (after all, the total number of arguments is &lt;em&gt;not&lt;/em&gt; passed in a register!), but I gather it has something to do with possible optimizations in functions further down/up the call stack, since saving those registers is rather costly and should be avoided if not necessary. I only figured out the importance of zeroing the register when I tried the program on a workstation at my university – while I could get away without it on my own laptop, it would invariably crash there without that instruction.&lt;/p&gt;
&lt;p&gt;Another problem would have been the newline characters: Since the GASM syntax requires a newline after every machine instruction statement, it's not possible to get away like the C quine from the mentioned article, that is, to simply write the quine on a single line. Fortunately, GCC/GASM does the right thing when confronted with "raw" newline characters inside of a string, and just treats them the same way it would handle a proper &lt;code&gt;\n&lt;/code&gt; newline. This causes some warnings from my version of GCC, but compiles/assembles nevertheless – otherwise, all the newline characters would probably have to be submitted as parameters for &lt;code&gt;printf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you are familiar with the GASM assembly syntax, you might have noticed a minor oddity about the code: Register names are not prefixed with a percent sign as they usually have to be. The reason for that is that the percent sign has a very special meaning in the formatting string parameter of &lt;code&gt;printf&lt;/code&gt; – it indicates that the following character(s) should be interpreted as a formatting directive, and replaced by a specific parameter of the function! This leads to a problem similar to simple backslash escaping: For every percent character, an ASCII-encoded percent sign has to be given to &lt;code&gt;printf&lt;/code&gt; as a parameter, but for every new parameter, we need a new &lt;code&gt;mov&lt;/code&gt; instruction to a register – which includes a percent sign...&lt;/p&gt;
&lt;p&gt;This part of the problem is &lt;a href="http://codegolf.stackexchange.com/a/609"&gt;actually easier to solve on x86&lt;/a&gt; (the 32 bit variant): Since all function parameters are there passed on the stack, they can be pushed there with the &lt;code&gt;push&lt;/code&gt; instruction (&lt;code&gt;push $0x22&lt;/code&gt;, &lt;code&gt;push $0x0a&lt;/code&gt;, ...) – no percent sign necessary! On x86-64, the first 13 parameters are passed in processor register instead, which means that additional parameters would have to be generated by using up the first few parameter slots in a way that still creates the same output – not impossible, but very tedious (both in manual execution and code size/readability).&lt;/p&gt;
&lt;p&gt;A trick to circumvent that problem is the use of the &lt;code&gt;.noprefix&lt;/code&gt; directive of GCC/GASM: Since a percent sign in front of a variable is only a visual aid to the programmer and not necessary to correctly parse the program, this option allows us to simply omit all the percent prefixes – which is just what we need.&lt;/p&gt;
&lt;p&gt;After the encoding has been taken care of, all that is left is the exact structure of the &lt;code&gt;printf&lt;/code&gt; format string. As I've mentioned, every occurence of a percent character is replaced by one of the function parameters in the output, and by careful construction of the formatting string, together with the trick of using the very same string as both a formatting specification for printf and a parameter being substituted inside that formatting string it is possible to create an output that is exactly identical to the source code – a quine!&lt;/p&gt;</summary><category term="programming"></category><category term="assembler"></category></entry><entry><title>Jumboframes on the Internet?</title><link href="//blog.lxgr.net/posts/2013/04/12/jumboframes-on-the-internet/" rel="alternate"></link><updated>2013-04-12T11:43:00+02:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-04-12:posts/2013/04/12/jumboframes-on-the-internet/</id><summary type="html">&lt;p&gt;Recently, I've been experimenting with Wireshark for my bachelor's thesis, monitoring the performance of TCP uploads from my notebook to my web server. A while ago, I had also swapped my router for a nicer model capable of gigabit ethernet and 5 GHz wifi (due to increasing congestion of the 2.4 GHz band in my apartment building), of course also running OpenWrt &lt;a href="//blog.lxgr.net/posts/2013/01/28/my-openwrt-setup/"&gt;like the old one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Soon after the switch, I noticed an oddity in the Wireshark captures: Some of the outgoing TCP segments were reported as having a length of more than 1500 bytes, which is the upper payload limit for Ethernet, and therefore also for most, if not all, residential Internet connections.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ethernet frames bigger than 1500 bytes" src="//blog.lxgr.net/images/wireshark_tcp_gso.png" /&gt;&lt;/p&gt;
&lt;p&gt;Since I didn't really expect the path between my notebook and my server to be capable of a MTU higher than 1500, the obvious explanation for this to work would be IP fragmentation occuring in my router, which would be very unfortunate to say the least.&lt;/p&gt;
&lt;p&gt;To figure out if that was really the case, I started tcpdump on the server, with the following interesting result:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ethernet frames containing TCP segments, as received by the server" src="//blog.lxgr.net/images/wireshark_tcp_normal.png" /&gt;&lt;/p&gt;
&lt;p&gt;No sign of IP fragmentation whatsoever; the packets were arriving as if sent with an MTU of 1500! This also matches both the MTU configured on my notebook and explains the pattern of ACKs received from the server – usually, every other segment should be ACKed by the recipient, but in this case, I was receiving much more than that.&lt;/p&gt;
&lt;p&gt;After a bit of googling, I found the explanation: &lt;a href="http://en.wikipedia.org/wiki/Large_segment_offload"&gt;TCP segementation offload (TSO)&lt;/a&gt;. This is (theoretically) a nice feature of some NICs that allow the operating system to delegate TCP segmentation and TCP and IP header generation to the network interface, relieving the CPU of those duties and possibly also increasing performance quite a bit. However, if there are bugs in the NIC firmware, this could lead to very obscure and hard to debug transmission errors, and it also makes debugging other network behavior more difficult, as I had experienced myself with my measurements.&lt;/p&gt;
&lt;p&gt;There is an easy way to disable TSO on Linux:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo ethtool -K eth0 tso off
sudo ethtool -K eth0 gso off
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;GSO is a very similar technology, which can be used to offload some of the higher-layer networking tasks from the kernel to the network interface for protocols other than TCP. It also has to be disabled, because according to my tests, it happily takes over TSO's duties once disabled, also causing strage results in Wireshark.&lt;/p&gt;
&lt;p&gt;Apart from the confusion in my packet traces, I have yet to experience any side effects of TSO or GSO with my NIC (likely because of the driver which is commendably developed by the NIC vendor itself), and plan to leave them enabled while I'm not working with Wireshark.&lt;/p&gt;</summary><category term="network"></category><category term="linux"></category></entry><entry><title>VPNs and IPv6, part 2</title><link href="//blog.lxgr.net/posts/2013/03/29/vpn-ipv6-part2/" rel="alternate"></link><updated>2013-03-29T17:28:00+01:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-03-29:posts/2013/03/29/vpn-ipv6-part2/</id><summary type="html">&lt;p&gt;As I've &lt;a href="//blog.lxgr.net/posts/2013/03/06/vpn-circumvention-ipv6/"&gt;written before&lt;/a&gt;, VPNs can lead to insecure situations when used with IPv6 enabled networks.&lt;/p&gt;
&lt;p&gt;The easiest way to mitigate that problem is actually just to enable IPv6 tunneling over the VPN itself, provided your VPN gateway has IPv6 connectivity and you have a spare /64 subnet you can dedicate to the VPN clients. (Unfortunately, this is the smallest subnet size OpenVpn is willing to accept). My provider has agreed to make an appropriate subnet available to my server, but I haven't been able to try it so far.&lt;/p&gt;
&lt;p&gt;If that's not possible for you, e.g. due to IPv6 being unavailable at your VPN gateway, there is a simple workaround that breaks IPv6 connectivity for all connected clients: Just hand out bogus IPv6 addresses and routes to all clients, and drop all IPv6 traffic on the server. This is of course not as nice as an option to cleanly disable IPv6 connectivity, but at least for the Android client, I'm not aware of any other solution so far.&lt;/p&gt;
&lt;p&gt;The following two lines in the OpenVPN server.conf should do the trick:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;server-ipv6 ::1/64
tun-ipv6
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure to disable IPv6 forwarding on the VPN server to avoid any surprises (e.g. link-local IPv6 connectivity to other servers on the same subnet):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sysctl net.ipv6.conf.all.forwarding=0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Try the setup by connecting to the VPN and accessing one of the innumerable "what-is-my-IPv6"–services from your client to make sure it works as expected.&lt;/p&gt;</summary><category term="vpn"></category><category term="network"></category><category term="linux"></category><category term="security"></category></entry><entry><title>Static blogs and HTTP caching</title><link href="//blog.lxgr.net/posts/2013/03/15/static-blog-http-caching/" rel="alternate"></link><updated>2013-03-15T10:56:00+01:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-03-15:posts/2013/03/15/static-blog-http-caching/</id><summary type="html">&lt;p&gt;As you can see in the footer, this blog is powered by &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;, a static blog generator written in Python. It's really simple to use and fits my requirements nicely – I can write posts offline on my notebook and view the results in my browser with the included web server, it doesn't require any insecure server-side software (the output is plain HTML, CSS and a bit of JavaScript for browsers that are not quite up to date) and is very easy on server resources because by default, almost everything can be cached by web browsers.&lt;/p&gt;
&lt;p&gt;However, there is one annoying side effect of everything being cached: Since that also includes the landing page, new posts could be invisible to recurring visitors for quite a while. In a bit more detail, here is what is going on at the HTTP level:&lt;/p&gt;
&lt;p&gt;By default, my webserver, lighttpd, delivers all static HTML pages with no explicit caching headers, but includes the modification time of the resource (only the relevant headers are included) and an &lt;a href="http://en.wikipedia.org/wiki/HTTP_ETag"&gt;&lt;code&gt;ETag&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Date: Fri, 15 Mar 2013 10:03:43 GMT
ETag: &amp;quot;4531062&amp;quot;
Last-Modified: Thu, 14 Mar 2013 20:12:06 GMT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;ETag&lt;/code&gt; is good to have (browsers can use it to unambiguously revalidate cached content with the server, as I'll explain later), but the &lt;code&gt;Last-Modified&lt;/code&gt;–Header combined with &lt;em&gt;no&lt;/em&gt; explicit statement about cacheability triggers a heuristic &lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.2.4"&gt;defined in HTTP&lt;/a&gt; in most browsers. Basically, browsers calculate the difference between the time the resource was retrieved and the time it was last modified on the server, and cache the resource for 10% of that value &lt;em&gt;without revalidating with the server&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This means that for a blog that is daily updated with new posts, users will eventually see the posts after a few hours after their last visit, but for a blog that hasn't been updated for several weeks or months, ten percent of that time can be pretty significant.&lt;/p&gt;
&lt;p&gt;A simple solution is to just manually define a cache validity in the HTTP headers for some or all resources. lighttpd has the &lt;a href="http://redmine.lighttpd.net/projects/1/wiki/Docs_ModExpire"&gt;&lt;code&gt;expires&lt;/code&gt; module&lt;/a&gt; that does just that. Here is the relevant line in my &lt;code&gt;lighttpd.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;expire.url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/theme/&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;access&lt;/span&gt; &lt;span class="s"&gt;plus&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="s"&gt;days&amp;quot;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;access&lt;/span&gt; &lt;span class="s"&gt;plus&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="s"&gt;hours&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The effect is that all resources in the subdirectory &lt;code&gt;theme&lt;/code&gt; will have an &lt;code&gt;Expires&lt;/code&gt; header 7 days in the future, and everything else will be valid for just an hour. This is a tradeoff between server and client resource usage and immediate updates: For me, an hour of delay is not a big deal, and users jumping back and forth between blog posts will be able to do so without any further HTTP requests. Here are the response headers of the main blog page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Cache-Control: max-age=3600
Date: Fri, 15 Mar 2013 10:23:06 GMT
ETag:&amp;quot;4531062&amp;quot;
Expires: Fri, 15 Mar 2013 11:23:06 GMT
Last-Modified: Thu, 14 Mar 2013 20:12:06 GMT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the &lt;code&gt;max-age&lt;/code&gt; directive exlicitly states a validity of 3600 seconds, and the &lt;code&gt;Expires&lt;/code&gt; header also points to a value one hour in the future.&lt;/p&gt;
&lt;p&gt;Even when that time is reached, the whole resource doesn't have to be transferred again: Browsers can just perform a conditional HTTP request using the &lt;code&gt;ETag&lt;/code&gt; or &lt;code&gt;Last-Modified&lt;/code&gt; headers that they cache together with the resource itself. If the content is still the same, the server will be able to deduce that from the headers and reply with a &lt;code&gt;304 Not Modified&lt;/code&gt; HTTP response. As long as your site is not very highly frequented or references many additional resources, cache revalidation is not too expensive.&lt;/p&gt;
&lt;p&gt;One thing that has also helped me tremendously in understanding HTTP caching was &lt;a href="http://stackoverflow.com/a/385491/1016939"&gt;an answer on Stackoverflow&lt;/a&gt; that explains how to force the various browsers to revalidate a resource or to completely bypass the cache – for debugging, it's very useful to know that there is a big difference between pressing &lt;code&gt;F5&lt;/code&gt; or &lt;code&gt;Ctrl + F5&lt;/code&gt; in most browsers.&lt;/p&gt;</summary><category term="web"></category><category term="blog"></category><category term="caching"></category></entry><entry><title>Variable indirection in shell scripts</title><link href="//blog.lxgr.net/posts/2013/03/13/variable-indirection-shell-scripts/" rel="alternate"></link><updated>2013-03-13T15:30:00+01:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-03-13:posts/2013/03/13/variable-indirection-shell-scripts/</id><summary type="html">&lt;p&gt;Recently, I had to find a way to do variable indirection in a shell script. More specifically, I wanted to write a function that takes two arguments and interprets one of them as a string, and the other one as a variable to which that string should be added – a simple append function.&lt;/p&gt;
&lt;p&gt;Usually, that would be a good occasion to switch to some more comfortable scripting language than the unix shell, but sometimes that's not possible. So here is how to do it (thanks to &lt;a href="http://tldp.org/LDP/abs/html/ivr.html"&gt;an article on TLDP&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;append&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;# Appends the value of $1 to the variable indicated by $2&lt;/span&gt;
    &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;\$&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://tldp.org/LDP/abs/html/internal.html#EVALREF"&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; is a very useful shell built-in that converts a string to a command, performing the regular shell variable substitution. In the small function above, this means that when calling the function like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;A_VARIABLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;initial value&amp;quot;&lt;/span&gt;
append &lt;span class="s2"&gt;&amp;quot;some string&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A_VARIABLE&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;\$&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;first becomes (by regular shell variable substitution)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;eval &lt;/span&gt;&lt;span class="nv"&gt;A_VARIABLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$A_VARIABLE&lt;/span&gt;&lt;span class="s2"&gt; some string&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is then evaluated as a command, again with variable substitution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;A_VARIABLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;initial value some string&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At least, I hope that this is what is actually going on... Quote escaping in shell scripts can be tricky sometimes. Many more useful examples of indirect references can be found in the referenced article.&lt;/p&gt;</summary><category term="shell"></category><category term="linux"></category><category term="programming"></category></entry><entry><title>TLS and RC4 - not so secure after all</title><link href="//blog.lxgr.net/posts/2013/03/13/tls-rc4-not-so-secure/" rel="alternate"></link><updated>2013-03-13T11:24:00+01:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-03-13:posts/2013/03/13/tls-rc4-not-so-secure/</id><summary type="html">&lt;p&gt;Turns out that TLS with RC4 (which was &lt;a href="http://blog.phonefactor.com/2011/09/23/slaying-beast-mitigating-the-latest-ssltls-vulnerability/"&gt;supposed to protect us&lt;/a&gt; against the BEAST and the CRIME attacks) is &lt;a href="http://www.isg.rhul.ac.uk/tls/"&gt;not so secure after all&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The attacks arise from statistical flaws in the keystream generated by the RC4 algorithm which become apparent in TLS ciphertexts when the same plaintext is repeatedly encrypted at a fixed location across many TLS sessions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That sounds familiar... A few months ago, I read a very similar statement in a paragraph on attacks on RC4 &lt;a href="http://tools.ietf.org/html/rfc4345#section-5"&gt;in RFC4345&lt;/a&gt; (Improved Arcfour Modes for SSH):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[...] A consequence of this is that encrypting the same data (for instance,a password) sufficiently many times in separate Arcfour keystreams can be sufficient to leak information about it to an adversary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Intrigued by that, I posted &lt;a href="http://crypto.stackexchange.com/questions/3451/is-rc4-a-problem-for-password-based-authentication/"&gt;a question&lt;/a&gt; on Stackexchange Cryptography, asking if the same problem wouldn't also apply to TLS, with pretty bad implications for password/cookie authentication. I got a very interesting response by a user named poncho, who claimed that he was able to successfully recover a password from 8 billion RC4 encrypted messages.&lt;/p&gt;
&lt;p&gt;8 billion seems like too much for a practical attack even when the attacker is able to provoke repated retransmissions of the secret, but if there were a way to optimize that attack, TLS with RC4 would be in serious trouble. And this seems to be exactly what happened just now.&lt;/p&gt;
&lt;p&gt;Matthew Green has published a very nice &lt;a href="http://blog.cryptographyengineering.com/2013/03/attack-of-week-rc4-is-kind-of-broken-in.html"&gt;summary&lt;/a&gt; of the new attack and the implications on his blog, and I completely agree with his conclusion – we need to stop using RC4.&lt;/p&gt;</summary><category term="cryptography"></category><category term="security"></category></entry><entry><title>Server relocation</title><link href="//blog.lxgr.net/posts/2013/03/08/server-move-graz-vienna/" rel="alternate"></link><updated>2013-03-08T11:46:00+01:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-03-08:posts/2013/03/08/server-move-graz-vienna/</id><summary type="html">&lt;p&gt;This weekend, the server on which this blog is hosted will be &lt;a href="http://www.edis.at/de/support-und-service/blog/edis-zieht-um-nach-wien/"&gt;moved from Graz to Vienna&lt;/a&gt;. If all goes well, there will be a short outage on Saturday evening/night, and much better connectivity afterwards.&lt;/p&gt;</summary><category term="hosting"></category><category term="network"></category></entry><entry><title>VPNs and IPv6</title><link href="//blog.lxgr.net/posts/2013/03/06/vpn-circumvention-ipv6/" rel="alternate"></link><updated>2013-03-06T10:31:00+01:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-03-06:posts/2013/03/06/vpn-circumvention-ipv6/</id><summary type="html">&lt;!--- Summary: Inadverted VPN circumvention by IPv6 --&gt;

&lt;p&gt;A while ago, I have configured a small OpenVPN for personal use (mostly for security when using public wireless networks) with &lt;a href="http://openvpn.net/"&gt;OpenVPN&lt;/a&gt;. The setup is pretty easy, thanks to a &lt;a href="http://wiki.openvpn.eu/index.php/Konfiguration_eines_Internetgateways"&gt;very helpful tutorial (in German)&lt;/a&gt; and the sensible default settings of OpenVPN itself. (Setting up the certificate infrastructure was a bit annoying, though – I would really prefer an SSH-like approach where the users can create a private key for themselves, and the VPN server has a list of the key/user mappings, but that's another story.)&lt;/p&gt;
&lt;p&gt;Configuring the server to push a default route to the clients is as simple as setting the &lt;code&gt;push redirect-gateway def1&lt;/code&gt; option in the server configuration, and mostly, that works as expected.&lt;/p&gt;
&lt;p&gt;However, there is a huge caveat for IPv4-only clients. Since I don't have an IPv6 subnet big enough to provide IPv6 tunneling on my server as well (OpenVPN, or at least the version included in Ubuntu 12.04, seems to require a /64 subnet for now, but my provider only provides a tiny /112), I just didn't configure IPv6 and expected IPv6 connectivity to be broken. But that's not what's happening:&lt;/p&gt;
&lt;p&gt;When connecting to the VPN from a client that has both IPv4 and IPv6 connectivity, only the IPv4 traffic will be routed over the VPN gateway, &lt;em&gt;but the IPv6 traffic will be routed locally&lt;/em&gt; – and since the &lt;a href="http://www.worldipv6launch.org/"&gt;world IPv6 launch&lt;/a&gt;, there are quite a lot of hosts that are reachable over IPv6 and serve AAAA records to all users. Except for TLS protected connections, traffic to them will be unencrypted, and even then, the connection metadata (IP addresses etc.) will be plainly visible to anybody on the public network.&lt;/p&gt;
&lt;p&gt;After thinking about that for a while, it kind of makes sense: At no point did I instruct OpenVPN to &lt;em&gt;break&lt;/em&gt; my existing IPv6 connectivity, and since I didn't provide any IPv6 tunneling settings, my routes for that were just left alone. It can also be fixed easily enough – just configure a script that tears down IPv6 connectivity before connecting to the VPN, and restores it immediately after that. Maybe there is even a way to do that from the server via &lt;code&gt;push&lt;/code&gt; instructions, but I've had no success with that so far.&lt;/p&gt;
&lt;p&gt;Curious about the issue, I decided to check how other VPN solutions and clients handle that situation, with pretty much the same results:&lt;/p&gt;
&lt;p&gt;Cisco's AnyConnect, when used with OpenConnect, behaves exactly like OpenVPN. The Android client, however, seems to specifically work around that problem – IPv6 connectivity breaks while connected to an IPv4-only VPN. I haven't been able to find out how that works, but I suspect that either some additional routes are pushed to the client, and the IPv6 traffic is discarded locally or at the gateway, or something is going on at the DNS level (since I get &lt;code&gt;NAME_NOT_RESOLVED&lt;/code&gt; errors when visiting &lt;em&gt;what-is-my-IPv6&lt;/em&gt;–like sites from the VPN).&lt;/p&gt;
&lt;p&gt;OpenVPN for Android behaves just like the Linux client. Unfortunately, unlike Linux, Android provides no way for the user or the VPN application developer to disable IPv6, which makes a workaround pretty much impossible. I've reported that as &lt;a href="https://code.google.com/p/ics-openvpn/issues/detail?id=142"&gt;a bug&lt;/a&gt; to the developer, even though it is a problem with android, not OpenVPN – maybe he'll figure out a solution. (I've also reported it as &lt;a href="https://code.google.com/p/android/issues/detail?id=48417"&gt;an Android bug&lt;/a&gt;, but I'm really not sure if there's anybody from Google watching that bug tracker...)&lt;/p&gt;
&lt;p&gt;I'm not really sure what would be the best solution to the problem: Should VPN clients just break IPv6 connectivity by default, to protect the data of users who will most likely be using a VPN under the assumption that it will be doing just that? Or should it leave IPv6 alone by default, just providing an option to automatically disable their IPv6 connectivity when needed? I'm in favor of the first approach, but as it is, even the second one would be a big step forward – on Android, users have &lt;a href="https://code.google.com/p/android/issues/detail?id=32216"&gt;&lt;em&gt;no&lt;/em&gt; way of disabling IPv6 traffic circumventing their VPN connection&lt;/a&gt;, and most will not even know that it's happening.&lt;/p&gt;</summary><category term="vpn"></category><category term="network"></category><category term="linux"></category><category term="security"></category></entry><entry><title>My OpenWrt setup</title><link href="//blog.lxgr.net/posts/2013/01/28/my-openwrt-setup/" rel="alternate"></link><updated>2013-01-28T12:15:00+01:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-01-28:posts/2013/01/28/my-openwrt-setup/</id><summary type="html">&lt;!--- Summary: My OpenWrt configuration --&gt;

&lt;p&gt;This weekend, I finally reinstalled &lt;a href="https://openwrt.org/"&gt;OpenWrt&lt;/a&gt; on my home router. I've been using a nightly build for several months now, and it had been working just fine, but unfortunately, the opkg (OpenWrt's package manager) repositories for the nightly builds are updated every few days, and all of the kernel modules have hard dependencies on a specific kernel version. So in order to install a new kernel module, I would have to upgrade my OpenWrt version every time – not very convenient.&lt;/p&gt;
&lt;p&gt;Luckily, there is a release candidate for the newest version, called "Attitude Adjustment", which is what I upgraded to. This went without any major problems and I was even able to keep my configuration, but I had to reinstall all packages not included by default. At this opportunity, I decided to document my configuration and installed packages.&lt;/p&gt;
&lt;h1&gt;Avoiding Bufferbloat&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://www.bufferbloat.net/"&gt;Bufferbloat&lt;/a&gt; is a nasty phenomenon that occurs mostly on residential internet connections. In a nutshell, hugely oversized buffers combined with static queue management in cable and DSL modems cause huge delays during large uploads, which can lead to a very bad experience for interactive applications. I use a SIP phone to make voice calls, and previously to my solution, it was nearly impossible to make a phone call at the same time as somebody uploading pictures or videos on the same network – now it works just fine.&lt;/p&gt;
&lt;p&gt;The solution to Bufferbloat is two-fold: First, the available bandwidth has to be limited on the router to just below the bandwith actually available to the modem, in order to avoid any buffering in the modem. Then, some adaptive or even "fair" queueing algorithm like &lt;a href="http://queue.acm.org/detail.cfm?id=2209336"&gt;CoDel&lt;/a&gt; can be used. Both tasks can be achieved via the Linux packet scheduler and its managment tool, &lt;code&gt;tc&lt;/code&gt;. Both are available as OpenWrt packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;opkg install tc kmod-sched
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;uci, OpenWrt's configuration system, doesn't support custom packet schedulers yet, so my setup script is implemented as a shell script that is executed once at every boot of the router.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c"&gt;# Insert the necessary kernel modules&lt;/span&gt;
insmod sch_htb
insmod sch_fq_codel

&lt;span class="c"&gt;# Reset the queueing disciplines&lt;/span&gt;
tc qdisc del dev eth1 root
tc qdisc del dev br-lan root

&lt;span class="c"&gt;# Add a HTB queue to the internal interface (to limit upload speeds)&lt;/span&gt;
tc qdisc add dev eth1 root handle 1: htb default 1
&lt;span class="c"&gt;# Limit the upload speed to 2048 kbit/s (adjust this to just below your actual upload speed!)&lt;/span&gt;
tc class add dev eth1 parent 1: classid 1:1 htb rate 2048kbit
&lt;span class="c"&gt;# Enable CoDel as a queueing algorithm for the queue&lt;/span&gt;
tc qdisc add dev eth1 parent 1:1 handle 11: fq_codel

&lt;span class="c"&gt;# The same for download speeds - adjust accordingly&lt;/span&gt;
tc qdisc add dev br-lan root handle 1: htb default 1
tc class add dev br-lan parent 1: classid 1:1 htb rate 32768kbit
tc qdisc add dev br-lan parent 1:1 handle 11: fq_codel

&lt;span class="nb"&gt;exit &lt;/span&gt;0
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This solved the Bufferbloat issue completely for me, but if it works for you depends on a lot of factors - test the script before enabling it at every boot.&lt;/p&gt;
&lt;h1&gt;IPv6 connectivity via an HE 6in4 tunnel&lt;/h1&gt;
&lt;p&gt;OpenWrt works with IPv6 out of the box. If your provider isn't supplying you with native v6 connectivity yet (which is unfortunately still very likely), you can use a &lt;a href="http://www.tunnelbroker.net"&gt;free tunnel&lt;/a&gt; provided by &lt;a href="http://he.net"&gt;Hurricane Electric&lt;/a&gt;. The registration process is pretty straightforward, and HE even provide configuration samples for many routers and operating systems. The one for OpenWrt didn't work for me (which was probably my fault, so you should give it a try!), but this one does:&lt;/p&gt;
&lt;p&gt;First, the 6in4 tunneling module has to be installed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;opkg install 6in4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, the tunnel interface can be configured in &lt;code&gt;/etc/config/network&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For the local network, an IPv6 address has to be configured for the router. It can be any address in one of the "Routed IPv6 Prefixed" shown in the tunnel details on tunnelbroker.net, so if you were assigned the prefix &lt;code&gt;2001:470:1b:1234::/64&lt;/code&gt;, you could choose &lt;code&gt;2001:470:1b:1234::1/64&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;config interface &amp;#39;lan&amp;#39;
    option ifname &amp;#39;eth0&amp;#39;
    option type &amp;#39;bridge&amp;#39;
    option proto &amp;#39;static&amp;#39;
    option ipaddr &amp;#39;192.168.1.1&amp;#39;
    option netmask &amp;#39;255.255.255.0&amp;#39;
    # 
    option ip6addr &amp;#39;2001:470:1b:1234:1/48&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The 6in4 tunnel interface has to be configured like this (assuming your "Client IPv6 address" is &lt;code&gt;2001:470:1a:1234::2&lt;/code&gt;, your "Server IPv4 address" is &lt;code&gt;1.2.3.4&lt;/code&gt;, and your "Tunnel ID" is &lt;code&gt;12345&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;config interface &amp;#39;henet&amp;#39;
    option proto &amp;#39;6in4&amp;#39;
    option peeraddr &amp;#39;1.2.3.4&amp;#39;
    option ip6addr &amp;#39;2001:470:1a:1234::2/64&amp;#39;
    option tunnelid &amp;#39;12345&amp;#39;
    option username &amp;#39;your.username&amp;#39;
    option password &amp;#39;yourpassword&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Username and password are &lt;em&gt;not&lt;/em&gt; identical to your HE login credentials – they can be retrieved on the "Example Configurations" tab on the "Tunnel Details" page.&lt;/p&gt;
&lt;p&gt;To configure the firewall, you can exceuted the command provided by HE (&lt;code&gt;uci set firewall.@zone[1].network='wan henet'&lt;/code&gt;), or manually insert the line &lt;code&gt;option network 'wan henet'&lt;/code&gt; to the &lt;code&gt;wan&lt;/code&gt; block in the file &lt;code&gt;/etc/config/firewall&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you want to use one of IPv6's nicest features, stateless autoconfiguration, &lt;code&gt;radvd&lt;/code&gt; has to be installed...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;opkg install radvd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...and configured like this (in &lt;code&gt;/etc/config/radvd&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;config interface
    option interface        &amp;#39;lan&amp;#39;
    option AdvSendAdvert    1
    option AdvManagedFlag   0
    option AdvOtherConfigFlag 0
    list client             &amp;#39;&amp;#39;
    option ignore           0

config prefix
    option interface        &amp;#39;lan&amp;#39;
    list prefix             &amp;#39;2001:470:1b:1234::/64&amp;#39;
    option AdvOnLink        1
    option AdvAutonomous    1
    option AdvRouterAddr    0
    option ignore           0
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Dynamic DNS&lt;/h1&gt;
&lt;p&gt;OpenWrt has built-in support for many dynamic DNS services, and the &lt;a href="http://wiki.openwrt.org/doc/howto/ddns.client"&gt;documentation on their wiki&lt;/a&gt; has all you need to configure it.&lt;/p&gt;
&lt;h1&gt;Port forwarding&lt;/h1&gt;
&lt;p&gt;Specific ports of devices behind the OpenWrt NAT can be made reachable by a block like this in &lt;code&gt;/etc/config/firewall&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;config &amp;#39;redirect&amp;#39;
    option &amp;#39;name&amp;#39; &amp;#39;myhomeserver&amp;#39;
    option &amp;#39;src&amp;#39; &amp;#39;wan&amp;#39;
    option &amp;#39;proto&amp;#39; &amp;#39;tcp&amp;#39;
    option &amp;#39;src_dport&amp;#39; &amp;#39;22&amp;#39;
    option &amp;#39;dest_ip&amp;#39; &amp;#39;192.168.1.123&amp;#39;
    option &amp;#39;dest_port&amp;#39; &amp;#39;22&amp;#39;
    option &amp;#39;target&amp;#39; &amp;#39;DNAT&amp;#39;
    option &amp;#39;dest&amp;#39; &amp;#39;lan&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Port mirroring with iptables&lt;/h1&gt;
&lt;p&gt;My main motivation for upgrading to the release candidate was actually an iptables module called &lt;code&gt;tee&lt;/code&gt;. It can be used to duplicate all or a subset of all packets going throuth the router and transmit them to some other host running a packet analyzer like Wireshark. This can be very useful to debug embedded wireless devices without having to resort to a Wifi card running as a packet sniffer, which was my previous approach.&lt;/p&gt;
&lt;p&gt;In order for the following command to work, the &lt;code&gt;tee&lt;/code&gt; module has to be installed on the router. For some reason, &lt;code&gt;ip6tables&lt;/code&gt; is also required, or loading the module will fail:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;opkg install iptables-mod-tee ip6tables
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To forward all traffic going through the router to a machine in the private network at 192.168.1.123, simply exceute this command in a shell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;iptables -A POSTROUTING -t mangle -j TEE --gateway 192.168.1.123
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The forwarded packets will still show the internal IP addresses, which makes finding a specific device much easier.&lt;/p&gt;
&lt;h1&gt;To be continued&lt;/h1&gt;
&lt;p&gt;That's my configuration for now – I hope to be able to update this blog regularly if I find some improvements to my setup.&lt;/p&gt;</summary><category term="openwrt"></category><category term="network"></category><category term="linux"></category></entry><entry><title>Hello</title><link href="//blog.lxgr.net/posts/2013/01/13/hello/" rel="alternate"></link><updated>2013-01-13T12:00:00+01:00</updated><author><name>lxgr</name></author><id>tag:blog.lxgr.net,2013-01-13:posts/2013/01/13/hello/</id><summary type="html">&lt;!--- Summary: Welcome to my blog --&gt;

&lt;p&gt;This is going to be my new personal blog. Topics will vary from programming and technical stuff to random thoughts about (possibly non-technical) things.&lt;/p&gt;</summary><category term="hello"></category></entry></feed>